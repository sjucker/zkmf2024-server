/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.TimetableEntry.TimetableEntryPath;
import ch.zkmf2024.server.jooq.generated.tables.records.RankingPenaltyRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class RankingPenalty extends TableImpl<RankingPenaltyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ranking_penalty</code>
     */
    public static final RankingPenalty RANKING_PENALTY = new RankingPenalty();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RankingPenaltyRecord> getRecordType() {
        return RankingPenaltyRecord.class;
    }

    /**
     * The column <code>ranking_penalty.id</code>.
     */
    public final TableField<RankingPenaltyRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>ranking_penalty.fk_timetable_entry</code>.
     */
    public final TableField<RankingPenaltyRecord, Long> FK_TIMETABLE_ENTRY = createField(DSL.name("fk_timetable_entry"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>ranking_penalty.minutes_overrun</code>.
     */
    public final TableField<RankingPenaltyRecord, Integer> MINUTES_OVERRUN = createField(DSL.name("minutes_overrun"), SQLDataType.INTEGER.nullable(false), this, "");

    private RankingPenalty(Name alias, Table<RankingPenaltyRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RankingPenalty(Name alias, Table<RankingPenaltyRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ranking_penalty</code> table reference
     */
    public RankingPenalty(String alias) {
        this(DSL.name(alias), RANKING_PENALTY);
    }

    /**
     * Create an aliased <code>ranking_penalty</code> table reference
     */
    public RankingPenalty(Name alias) {
        this(alias, RANKING_PENALTY);
    }

    /**
     * Create a <code>ranking_penalty</code> table reference
     */
    public RankingPenalty() {
        this(DSL.name("ranking_penalty"), null);
    }

    public <O extends Record> RankingPenalty(Table<O> path, ForeignKey<O, RankingPenaltyRecord> childPath, InverseForeignKey<O, RankingPenaltyRecord> parentPath) {
        super(path, childPath, parentPath, RANKING_PENALTY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RankingPenaltyPath extends RankingPenalty implements Path<RankingPenaltyRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> RankingPenaltyPath(Table<O> path, ForeignKey<O, RankingPenaltyRecord> childPath, InverseForeignKey<O, RankingPenaltyRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private RankingPenaltyPath(Name alias, Table<RankingPenaltyRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RankingPenaltyPath as(String alias) {
            return new RankingPenaltyPath(DSL.name(alias), this);
        }

        @Override
        public RankingPenaltyPath as(Name alias) {
            return new RankingPenaltyPath(alias, this);
        }

        @Override
        public RankingPenaltyPath as(Table<?> alias) {
            return new RankingPenaltyPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<RankingPenaltyRecord, Long> getIdentity() {
        return (Identity<RankingPenaltyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RankingPenaltyRecord> getPrimaryKey() {
        return Keys.PK_RANKING_PENALTY;
    }

    @Override
    public List<ForeignKey<RankingPenaltyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RANKING_PENALTY__FK_TIMETABLE_ENTRY);
    }

    private transient TimetableEntryPath _timetableEntry;

    /**
     * Get the implicit join path to the <code>public.timetable_entry</code>
     * table.
     */
    public TimetableEntryPath timetableEntry() {
        if (_timetableEntry == null)
            _timetableEntry = new TimetableEntryPath(this, Keys.RANKING_PENALTY__FK_TIMETABLE_ENTRY, null);

        return _timetableEntry;
    }

    @Override
    public RankingPenalty as(String alias) {
        return new RankingPenalty(DSL.name(alias), this);
    }

    @Override
    public RankingPenalty as(Name alias) {
        return new RankingPenalty(alias, this);
    }

    @Override
    public RankingPenalty as(Table<?> alias) {
        return new RankingPenalty(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RankingPenalty rename(String name) {
        return new RankingPenalty(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RankingPenalty rename(Name name) {
        return new RankingPenalty(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RankingPenalty rename(Table<?> name) {
        return new RankingPenalty(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RankingPenalty where(Condition condition) {
        return new RankingPenalty(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RankingPenalty where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RankingPenalty where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RankingPenalty where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RankingPenalty where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RankingPenalty where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RankingPenalty where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RankingPenalty where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RankingPenalty whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RankingPenalty whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
