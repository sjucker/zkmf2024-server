/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables.records;

import ch.zkmf2024.server.jooq.generated.tables.JudgeReport;
import ch.zkmf2024.server.jooq.generated.tables.interfaces.IJudgeReport;
import ch.zkmf2024.server.jooq.generated.tables.pojos.JudgeReportPojo;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class JudgeReportRecord extends UpdatableRecordImpl<JudgeReportRecord> implements IJudgeReport {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>judge_report.id</code>.
     */
    @Override
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>judge_report.id</code>.
     */
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>judge_report.fk_judge</code>.
     */
    @Override
    public void setFkJudge(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>judge_report.fk_judge</code>.
     */
    @Override
    public Long getFkJudge() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>judge_report.fk_timetable_entry</code>.
     */
    @Override
    public void setFkTimetableEntry(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>judge_report.fk_timetable_entry</code>.
     */
    @Override
    public Long getFkTimetableEntry() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>judge_report.score</code>.
     */
    @Override
    public void setScore(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>judge_report.score</code>.
     */
    @Override
    public BigDecimal getScore() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>judge_report.status</code>.
     */
    @Override
    public void setStatus(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>judge_report.status</code>.
     */
    @Override
    public String getStatus() {
        return (String) get(4);
    }

    /**
     * Setter for <code>judge_report.finished_at</code>.
     */
    @Override
    public void setFinishedAt(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>judge_report.finished_at</code>.
     */
    @Override
    public LocalDateTime getFinishedAt() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>judge_report.rating_fixed</code>.
     */
    @Override
    public void setRatingFixed(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>judge_report.rating_fixed</code>.
     */
    @Override
    public Boolean getRatingFixed() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>judge_report.role</code>.
     */
    @Override
    public void setRole(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>judge_report.role</code>.
     */
    @Override
    public String getRole() {
        return (String) get(7);
    }

    /**
     * Setter for <code>judge_report.category</code>.
     */
    @Override
    public void setCategory(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>judge_report.category</code>.
     */
    @Override
    public String getCategory() {
        return (String) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IJudgeReport from) {
        setId(from.getId());
        setFkJudge(from.getFkJudge());
        setFkTimetableEntry(from.getFkTimetableEntry());
        setScore(from.getScore());
        setStatus(from.getStatus());
        setFinishedAt(from.getFinishedAt());
        setRatingFixed(from.getRatingFixed());
        setRole(from.getRole());
        setCategory(from.getCategory());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IJudgeReport> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JudgeReportRecord
     */
    public JudgeReportRecord() {
        super(JudgeReport.JUDGE_REPORT);
    }

    /**
     * Create a detached, initialised JudgeReportRecord
     */
    public JudgeReportRecord(Long id, Long fkJudge, Long fkTimetableEntry, BigDecimal score, String status, LocalDateTime finishedAt, Boolean ratingFixed, String role, String category) {
        super(JudgeReport.JUDGE_REPORT);

        setId(id);
        setFkJudge(fkJudge);
        setFkTimetableEntry(fkTimetableEntry);
        setScore(score);
        setStatus(status);
        setFinishedAt(finishedAt);
        setRatingFixed(ratingFixed);
        setRole(role);
        setCategory(category);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised JudgeReportRecord
     */
    public JudgeReportRecord(JudgeReportPojo value) {
        super(JudgeReport.JUDGE_REPORT);

        if (value != null) {
            setId(value.getId());
            setFkJudge(value.getFkJudge());
            setFkTimetableEntry(value.getFkTimetableEntry());
            setScore(value.getScore());
            setStatus(value.getStatus());
            setFinishedAt(value.getFinishedAt());
            setRatingFixed(value.getRatingFixed());
            setRole(value.getRole());
            setCategory(value.getCategory());
            resetChangedOnNotNull();
        }
    }
}
