/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables.daos;

import ch.zkmf2024.server.jooq.generated.tables.User;
import ch.zkmf2024.server.jooq.generated.tables.pojos.UserPojo;
import ch.zkmf2024.server.jooq.generated.tables.records.UserRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UserDao extends DAOImpl<UserRecord, UserPojo, String> {

    /**
     * Create a new UserDao without any configuration
     */
    public UserDao() {
        super(User.USER, UserPojo.class);
    }

    /**
     * Create a new UserDao with an attached configuration
     */
    public UserDao(Configuration configuration) {
        super(User.USER, UserPojo.class, configuration);
    }

    @Override
    public String getId(UserPojo object) {
        return object.getEmail();
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserPojo> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<UserPojo> fetchByEmail(String... values) {
        return fetch(User.USER.EMAIL, values);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public UserPojo fetchOneByEmail(String value) {
        return fetchOne(User.USER.EMAIL, value);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public Optional<UserPojo> fetchOptionalByEmail(String value) {
        return fetchOptional(User.USER.EMAIL, value);
    }

    /**
     * Fetch records that have <code>role BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserPojo> fetchRangeOfRole(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.ROLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>role IN (values)</code>
     */
    public List<UserPojo> fetchByRole(String... values) {
        return fetch(User.USER.ROLE, values);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserPojo> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<UserPojo> fetchByPassword(String... values) {
        return fetch(User.USER.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>last_login BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserPojo> fetchRangeOfLastLogin(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(User.USER.LAST_LOGIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_login IN (values)</code>
     */
    public List<UserPojo> fetchByLastLogin(LocalDateTime... values) {
        return fetch(User.USER.LAST_LOGIN, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserPojo> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(User.USER.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<UserPojo> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(User.USER.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>email_verification BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<UserPojo> fetchRangeOfEmailVerification(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.EMAIL_VERIFICATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email_verification IN (values)</code>
     */
    public List<UserPojo> fetchByEmailVerification(String... values) {
        return fetch(User.USER.EMAIL_VERIFICATION, values);
    }

    /**
     * Fetch records that have <code>email_verified_at BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<UserPojo> fetchRangeOfEmailVerifiedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(User.USER.EMAIL_VERIFIED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email_verified_at IN (values)</code>
     */
    public List<UserPojo> fetchByEmailVerifiedAt(LocalDateTime... values) {
        return fetch(User.USER.EMAIL_VERIFIED_AT, values);
    }
}
