/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Indexes;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.Titel.TitelPath;
import ch.zkmf2024.server.jooq.generated.tables.VereinProgramm.VereinProgrammPath;
import ch.zkmf2024.server.jooq.generated.tables.records.VereinProgrammTitelRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class VereinProgrammTitel extends TableImpl<VereinProgrammTitelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>verein_programm_titel</code>
     */
    public static final VereinProgrammTitel VEREIN_PROGRAMM_TITEL = new VereinProgrammTitel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VereinProgrammTitelRecord> getRecordType() {
        return VereinProgrammTitelRecord.class;
    }

    /**
     * The column <code>verein_programm_titel.fk_programm</code>.
     */
    public final TableField<VereinProgrammTitelRecord, Long> FK_PROGRAMM = createField(DSL.name("fk_programm"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>verein_programm_titel.fk_titel</code>.
     */
    public final TableField<VereinProgrammTitelRecord, Long> FK_TITEL = createField(DSL.name("fk_titel"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>verein_programm_titel.position</code>.
     */
    public final TableField<VereinProgrammTitelRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>verein_programm_titel.duration_in_seconds</code>.
     */
    public final TableField<VereinProgrammTitelRecord, Integer> DURATION_IN_SECONDS = createField(DSL.name("duration_in_seconds"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>verein_programm_titel.applaus_in_seconds</code>.
     */
    public final TableField<VereinProgrammTitelRecord, Integer> APPLAUS_IN_SECONDS = createField(DSL.name("applaus_in_seconds"), SQLDataType.INTEGER, this, "");

    private VereinProgrammTitel(Name alias, Table<VereinProgrammTitelRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private VereinProgrammTitel(Name alias, Table<VereinProgrammTitelRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>verein_programm_titel</code> table reference
     */
    public VereinProgrammTitel(String alias) {
        this(DSL.name(alias), VEREIN_PROGRAMM_TITEL);
    }

    /**
     * Create an aliased <code>verein_programm_titel</code> table reference
     */
    public VereinProgrammTitel(Name alias) {
        this(alias, VEREIN_PROGRAMM_TITEL);
    }

    /**
     * Create a <code>verein_programm_titel</code> table reference
     */
    public VereinProgrammTitel() {
        this(DSL.name("verein_programm_titel"), null);
    }

    public <O extends Record> VereinProgrammTitel(Table<O> path, ForeignKey<O, VereinProgrammTitelRecord> childPath, InverseForeignKey<O, VereinProgrammTitelRecord> parentPath) {
        super(path, childPath, parentPath, VEREIN_PROGRAMM_TITEL);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class VereinProgrammTitelPath extends VereinProgrammTitel implements Path<VereinProgrammTitelRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> VereinProgrammTitelPath(Table<O> path, ForeignKey<O, VereinProgrammTitelRecord> childPath, InverseForeignKey<O, VereinProgrammTitelRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private VereinProgrammTitelPath(Name alias, Table<VereinProgrammTitelRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public VereinProgrammTitelPath as(String alias) {
            return new VereinProgrammTitelPath(DSL.name(alias), this);
        }

        @Override
        public VereinProgrammTitelPath as(Name alias) {
            return new VereinProgrammTitelPath(alias, this);
        }

        @Override
        public VereinProgrammTitelPath as(Table<?> alias) {
            return new VereinProgrammTitelPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FK_VEREIN_PROGRAMM_TITEL_TITEL);
    }

    @Override
    public UniqueKey<VereinProgrammTitelRecord> getPrimaryKey() {
        return Keys.PK_VEREIN_PROGRAMM_TITEL;
    }

    @Override
    public List<UniqueKey<VereinProgrammTitelRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.VEREIN_PROGRAMM_TITEL_FK_PROGRAMM_FK_TITEL_POSITION_KEY);
    }

    @Override
    public List<ForeignKey<VereinProgrammTitelRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VEREIN_PROGRAMM_TITEL__FK_VEREIN_PROGRAMM_TITEL_PROGRAMM, Keys.VEREIN_PROGRAMM_TITEL__FK_VEREIN_PROGRAMM_TITEL_PROGRAMM_TITEL);
    }

    private transient VereinProgrammPath _vereinProgramm;

    /**
     * Get the implicit join path to the <code>public.verein_programm</code>
     * table.
     */
    public VereinProgrammPath vereinProgramm() {
        if (_vereinProgramm == null)
            _vereinProgramm = new VereinProgrammPath(this, Keys.VEREIN_PROGRAMM_TITEL__FK_VEREIN_PROGRAMM_TITEL_PROGRAMM, null);

        return _vereinProgramm;
    }

    private transient TitelPath _titel;

    /**
     * Get the implicit join path to the <code>public.titel</code> table.
     */
    public TitelPath titel() {
        if (_titel == null)
            _titel = new TitelPath(this, Keys.VEREIN_PROGRAMM_TITEL__FK_VEREIN_PROGRAMM_TITEL_PROGRAMM_TITEL, null);

        return _titel;
    }

    @Override
    public VereinProgrammTitel as(String alias) {
        return new VereinProgrammTitel(DSL.name(alias), this);
    }

    @Override
    public VereinProgrammTitel as(Name alias) {
        return new VereinProgrammTitel(alias, this);
    }

    @Override
    public VereinProgrammTitel as(Table<?> alias) {
        return new VereinProgrammTitel(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VereinProgrammTitel rename(String name) {
        return new VereinProgrammTitel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VereinProgrammTitel rename(Name name) {
        return new VereinProgrammTitel(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VereinProgrammTitel rename(Table<?> name) {
        return new VereinProgrammTitel(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinProgrammTitel where(Condition condition) {
        return new VereinProgrammTitel(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinProgrammTitel where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinProgrammTitel where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinProgrammTitel where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VereinProgrammTitel where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VereinProgrammTitel where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VereinProgrammTitel where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VereinProgrammTitel where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinProgrammTitel whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinProgrammTitel whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
