/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables.daos;

import ch.zkmf2024.server.jooq.generated.tables.Image;
import ch.zkmf2024.server.jooq.generated.tables.pojos.ImagePojo;
import ch.zkmf2024.server.jooq.generated.tables.records.ImageRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class ImageDao extends DAOImpl<ImageRecord, ImagePojo, Long> {

    /**
     * Create a new ImageDao without any configuration
     */
    public ImageDao() {
        super(Image.IMAGE, ImagePojo.class);
    }

    /**
     * Create a new ImageDao with an attached configuration
     */
    public ImageDao(Configuration configuration) {
        super(Image.IMAGE, ImagePojo.class, configuration);
    }

    @Override
    public Long getId(ImagePojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ImagePojo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Image.IMAGE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ImagePojo> fetchById(Long... values) {
        return fetch(Image.IMAGE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ImagePojo fetchOneById(Long value) {
        return fetchOne(Image.IMAGE.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<ImagePojo> fetchOptionalById(Long value) {
        return fetchOptional(Image.IMAGE.ID, value);
    }

    /**
     * Fetch records that have <code>foreign_key BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ImagePojo> fetchRangeOfForeignKey(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Image.IMAGE.FOREIGN_KEY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>foreign_key IN (values)</code>
     */
    public List<ImagePojo> fetchByForeignKey(Long... values) {
        return fetch(Image.IMAGE.FOREIGN_KEY, values);
    }

    /**
     * Fetch records that have <code>content BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ImagePojo> fetchRangeOfContent(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(Image.IMAGE.CONTENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<ImagePojo> fetchByContent(byte[]... values) {
        return fetch(Image.IMAGE.CONTENT, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ImagePojo> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Image.IMAGE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<ImagePojo> fetchByName(String... values) {
        return fetch(Image.IMAGE.NAME, values);
    }

    /**
     * Fetch records that have <code>uploaded_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ImagePojo> fetchRangeOfUploadedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Image.IMAGE.UPLOADED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uploaded_at IN (values)</code>
     */
    public List<ImagePojo> fetchByUploadedAt(LocalDateTime... values) {
        return fetch(Image.IMAGE.UPLOADED_AT, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ImagePojo> fetchRangeOfType(String lowerInclusive, String upperInclusive) {
        return fetchRange(Image.IMAGE.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<ImagePojo> fetchByType(String... values) {
        return fetch(Image.IMAGE.TYPE, values);
    }

    /**
     * Fetch records that have <code>cloudflare_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ImagePojo> fetchRangeOfCloudflareId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Image.IMAGE.CLOUDFLARE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cloudflare_id IN (values)</code>
     */
    public List<ImagePojo> fetchByCloudflareId(String... values) {
        return fetch(Image.IMAGE.CLOUDFLARE_ID, values);
    }
}
