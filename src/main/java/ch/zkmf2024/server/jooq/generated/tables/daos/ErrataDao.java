/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables.daos;

import ch.zkmf2024.server.jooq.generated.tables.Errata;
import ch.zkmf2024.server.jooq.generated.tables.pojos.ErrataPojo;
import ch.zkmf2024.server.jooq.generated.tables.records.ErrataRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.util.List;
import java.util.Optional;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class ErrataDao extends DAOImpl<ErrataRecord, ErrataPojo, Long> {

    /**
     * Create a new ErrataDao without any configuration
     */
    public ErrataDao() {
        super(Errata.ERRATA, ErrataPojo.class);
    }

    /**
     * Create a new ErrataDao with an attached configuration
     */
    public ErrataDao(Configuration configuration) {
        super(Errata.ERRATA, ErrataPojo.class, configuration);
    }

    @Override
    public Long getId(ErrataPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ErrataPojo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Errata.ERRATA.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ErrataPojo> fetchById(Long... values) {
        return fetch(Errata.ERRATA.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ErrataPojo fetchOneById(Long value) {
        return fetchOne(Errata.ERRATA.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<ErrataPojo> fetchOptionalById(Long value) {
        return fetchOptional(Errata.ERRATA.ID, value);
    }

    /**
     * Fetch records that have <code>modul BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ErrataPojo> fetchRangeOfModul(String lowerInclusive, String upperInclusive) {
        return fetchRange(Errata.ERRATA.MODUL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modul IN (values)</code>
     */
    public List<ErrataPojo> fetchByModul(String... values) {
        return fetch(Errata.ERRATA.MODUL, values);
    }

    /**
     * Fetch records that have <code>klasse BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ErrataPojo> fetchRangeOfKlasse(String lowerInclusive, String upperInclusive) {
        return fetchRange(Errata.ERRATA.KLASSE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>klasse IN (values)</code>
     */
    public List<ErrataPojo> fetchByKlasse(String... values) {
        return fetch(Errata.ERRATA.KLASSE, values);
    }

    /**
     * Fetch records that have <code>besetzung BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ErrataPojo> fetchRangeOfBesetzung(String lowerInclusive, String upperInclusive) {
        return fetchRange(Errata.ERRATA.BESETZUNG, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>besetzung IN (values)</code>
     */
    public List<ErrataPojo> fetchByBesetzung(String... values) {
        return fetch(Errata.ERRATA.BESETZUNG, values);
    }

    /**
     * Fetch records that have <code>text BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ErrataPojo> fetchRangeOfText(String lowerInclusive, String upperInclusive) {
        return fetchRange(Errata.ERRATA.TEXT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>text IN (values)</code>
     */
    public List<ErrataPojo> fetchByText(String... values) {
        return fetch(Errata.ERRATA.TEXT, values);
    }
}
