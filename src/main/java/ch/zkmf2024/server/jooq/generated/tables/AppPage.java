/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.records.AppPageRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Collection;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class AppPage extends TableImpl<AppPageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>app_page</code>
     */
    public static final AppPage APP_PAGE = new AppPage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppPageRecord> getRecordType() {
        return AppPageRecord.class;
    }

    /**
     * The column <code>app_page.id</code>.
     */
    public final TableField<AppPageRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>app_page.markdown</code>.
     */
    public final TableField<AppPageRecord, String> MARKDOWN = createField(DSL.name("markdown"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>app_page.cloudflare_id</code>.
     */
    public final TableField<AppPageRecord, String> CLOUDFLARE_ID = createField(DSL.name("cloudflare_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>app_page.title</code>.
     */
    public final TableField<AppPageRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("''::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>app_page.news</code>.
     */
    public final TableField<AppPageRecord, Boolean> NEWS = createField(DSL.name("news"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>app_page.created_at</code>.
     */
    public final TableField<AppPageRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private AppPage(Name alias, Table<AppPageRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AppPage(Name alias, Table<AppPageRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>app_page</code> table reference
     */
    public AppPage(String alias) {
        this(DSL.name(alias), APP_PAGE);
    }

    /**
     * Create an aliased <code>app_page</code> table reference
     */
    public AppPage(Name alias) {
        this(alias, APP_PAGE);
    }

    /**
     * Create a <code>app_page</code> table reference
     */
    public AppPage() {
        this(DSL.name("app_page"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<AppPageRecord, Long> getIdentity() {
        return (Identity<AppPageRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AppPageRecord> getPrimaryKey() {
        return Keys.PK_APP_PAGE;
    }

    @Override
    public AppPage as(String alias) {
        return new AppPage(DSL.name(alias), this);
    }

    @Override
    public AppPage as(Name alias) {
        return new AppPage(alias, this);
    }

    @Override
    public AppPage as(Table<?> alias) {
        return new AppPage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AppPage rename(String name) {
        return new AppPage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppPage rename(Name name) {
        return new AppPage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppPage rename(Table<?> name) {
        return new AppPage(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AppPage where(Condition condition) {
        return new AppPage(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AppPage where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AppPage where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AppPage where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AppPage where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AppPage where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AppPage where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AppPage where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AppPage whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AppPage whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
