/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables.daos;

import ch.zkmf2024.server.jooq.generated.tables.RankingPenalty;
import ch.zkmf2024.server.jooq.generated.tables.pojos.RankingPenaltyPojo;
import ch.zkmf2024.server.jooq.generated.tables.records.RankingPenaltyRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.util.List;
import java.util.Optional;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class RankingPenaltyDao extends DAOImpl<RankingPenaltyRecord, RankingPenaltyPojo, Long> {

    /**
     * Create a new RankingPenaltyDao without any configuration
     */
    public RankingPenaltyDao() {
        super(RankingPenalty.RANKING_PENALTY, RankingPenaltyPojo.class);
    }

    /**
     * Create a new RankingPenaltyDao with an attached configuration
     */
    public RankingPenaltyDao(Configuration configuration) {
        super(RankingPenalty.RANKING_PENALTY, RankingPenaltyPojo.class, configuration);
    }

    @Override
    public Long getId(RankingPenaltyPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RankingPenaltyPojo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(RankingPenalty.RANKING_PENALTY.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<RankingPenaltyPojo> fetchById(Long... values) {
        return fetch(RankingPenalty.RANKING_PENALTY.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public RankingPenaltyPojo fetchOneById(Long value) {
        return fetchOne(RankingPenalty.RANKING_PENALTY.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<RankingPenaltyPojo> fetchOptionalById(Long value) {
        return fetchOptional(RankingPenalty.RANKING_PENALTY.ID, value);
    }

    /**
     * Fetch records that have <code>fk_timetable_entry BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<RankingPenaltyPojo> fetchRangeOfFkTimetableEntry(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(RankingPenalty.RANKING_PENALTY.FK_TIMETABLE_ENTRY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fk_timetable_entry IN (values)</code>
     */
    public List<RankingPenaltyPojo> fetchByFkTimetableEntry(Long... values) {
        return fetch(RankingPenalty.RANKING_PENALTY.FK_TIMETABLE_ENTRY, values);
    }

    /**
     * Fetch records that have <code>minutes_overrun BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RankingPenaltyPojo> fetchRangeOfMinutesOverrun(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(RankingPenalty.RANKING_PENALTY.MINUTES_OVERRUN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>minutes_overrun IN (values)</code>
     */
    public List<RankingPenaltyPojo> fetchByMinutesOverrun(Integer... values) {
        return fetch(RankingPenalty.RANKING_PENALTY.MINUTES_OVERRUN, values);
    }
}
