/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables.daos;

import ch.zkmf2024.server.jooq.generated.tables.Ranking;
import ch.zkmf2024.server.jooq.generated.tables.pojos.RankingPojo;
import ch.zkmf2024.server.jooq.generated.tables.records.RankingRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.util.List;
import java.util.Optional;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class RankingDao extends DAOImpl<RankingRecord, RankingPojo, Long> {

    /**
     * Create a new RankingDao without any configuration
     */
    public RankingDao() {
        super(Ranking.RANKING, RankingPojo.class);
    }

    /**
     * Create a new RankingDao with an attached configuration
     */
    public RankingDao(Configuration configuration) {
        super(Ranking.RANKING, RankingPojo.class, configuration);
    }

    @Override
    public Long getId(RankingPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RankingPojo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Ranking.RANKING.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<RankingPojo> fetchById(Long... values) {
        return fetch(Ranking.RANKING.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public RankingPojo fetchOneById(Long value) {
        return fetchOne(Ranking.RANKING.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<RankingPojo> fetchOptionalById(Long value) {
        return fetchOptional(Ranking.RANKING.ID, value);
    }

    /**
     * Fetch records that have <code>modul BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RankingPojo> fetchRangeOfModul(String lowerInclusive, String upperInclusive) {
        return fetchRange(Ranking.RANKING.MODUL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modul IN (values)</code>
     */
    public List<RankingPojo> fetchByModul(String... values) {
        return fetch(Ranking.RANKING.MODUL, values);
    }

    /**
     * Fetch records that have <code>klasse BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RankingPojo> fetchRangeOfKlasse(String lowerInclusive, String upperInclusive) {
        return fetchRange(Ranking.RANKING.KLASSE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>klasse IN (values)</code>
     */
    public List<RankingPojo> fetchByKlasse(String... values) {
        return fetch(Ranking.RANKING.KLASSE, values);
    }

    /**
     * Fetch records that have <code>besetzung BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RankingPojo> fetchRangeOfBesetzung(String lowerInclusive, String upperInclusive) {
        return fetchRange(Ranking.RANKING.BESETZUNG, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>besetzung IN (values)</code>
     */
    public List<RankingPojo> fetchByBesetzung(String... values) {
        return fetch(Ranking.RANKING.BESETZUNG, values);
    }

    /**
     * Fetch records that have <code>category BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RankingPojo> fetchRangeOfCategory(String lowerInclusive, String upperInclusive) {
        return fetchRange(Ranking.RANKING.CATEGORY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>category IN (values)</code>
     */
    public List<RankingPojo> fetchByCategory(String... values) {
        return fetch(Ranking.RANKING.CATEGORY, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RankingPojo> fetchRangeOfStatus(String lowerInclusive, String upperInclusive) {
        return fetchRange(Ranking.RANKING.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<RankingPojo> fetchByStatus(String... values) {
        return fetch(Ranking.RANKING.STATUS, values);
    }

    /**
     * Fetch records that have <code>fk_location BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RankingPojo> fetchRangeOfFkLocation(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Ranking.RANKING.FK_LOCATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fk_location IN (values)</code>
     */
    public List<RankingPojo> fetchByFkLocation(Long... values) {
        return fetch(Ranking.RANKING.FK_LOCATION, values);
    }
}
