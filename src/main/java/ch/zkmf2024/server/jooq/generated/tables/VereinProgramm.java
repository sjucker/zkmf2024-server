/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Indexes;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.TimetableEntry.TimetableEntryPath;
import ch.zkmf2024.server.jooq.generated.tables.Titel.TitelPath;
import ch.zkmf2024.server.jooq.generated.tables.Verein.VereinPath;
import ch.zkmf2024.server.jooq.generated.tables.VereinProgrammTitel.VereinProgrammTitelPath;
import ch.zkmf2024.server.jooq.generated.tables.records.VereinProgrammRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class VereinProgramm extends TableImpl<VereinProgrammRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>verein_programm</code>
     */
    public static final VereinProgramm VEREIN_PROGRAMM = new VereinProgramm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VereinProgrammRecord> getRecordType() {
        return VereinProgrammRecord.class;
    }

    /**
     * The column <code>verein_programm.id</code>.
     */
    public final TableField<VereinProgrammRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>verein_programm.fk_verein</code>.
     */
    public final TableField<VereinProgrammRecord, Long> FK_VEREIN = createField(DSL.name("fk_verein"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>verein_programm.modul</code>.
     */
    public final TableField<VereinProgrammRecord, String> MODUL = createField(DSL.name("modul"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>verein_programm.klasse</code>.
     */
    public final TableField<VereinProgrammRecord, String> KLASSE = createField(DSL.name("klasse"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein_programm.besetzung</code>.
     */
    public final TableField<VereinProgrammRecord, String> BESETZUNG = createField(DSL.name("besetzung"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein_programm.titel</code>.
     */
    public final TableField<VereinProgrammRecord, String> TITEL = createField(DSL.name("titel"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein_programm.info_moderation</code>.
     */
    public final TableField<VereinProgrammRecord, String> INFO_MODERATION = createField(DSL.name("info_moderation"), SQLDataType.VARCHAR(8192), this, "");

    /**
     * The column <code>verein_programm.total_duration_in_seconds</code>.
     */
    public final TableField<VereinProgrammRecord, Integer> TOTAL_DURATION_IN_SECONDS = createField(DSL.name("total_duration_in_seconds"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>verein_programm.modul_g_kat_a_1</code>.
     */
    public final TableField<VereinProgrammRecord, String> MODUL_G_KAT_A_1 = createField(DSL.name("modul_g_kat_a_1"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein_programm.modul_g_kat_a_2</code>.
     */
    public final TableField<VereinProgrammRecord, String> MODUL_G_KAT_A_2 = createField(DSL.name("modul_g_kat_a_2"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein_programm.modul_g_kat_a_titel_1_id</code>.
     */
    public final TableField<VereinProgrammRecord, Long> MODUL_G_KAT_A_TITEL_1_ID = createField(DSL.name("modul_g_kat_a_titel_1_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>verein_programm.modul_g_kat_a_titel_2_id</code>.
     */
    public final TableField<VereinProgrammRecord, Long> MODUL_G_KAT_A_TITEL_2_ID = createField(DSL.name("modul_g_kat_a_titel_2_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>verein_programm.modul_g_kat_b_titel_id</code>.
     */
    public final TableField<VereinProgrammRecord, Long> MODUL_G_KAT_B_TITEL_ID = createField(DSL.name("modul_g_kat_b_titel_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>verein_programm.modul_g_kat_c_titel_id</code>.
     */
    public final TableField<VereinProgrammRecord, Long> MODUL_G_KAT_C_TITEL_ID = createField(DSL.name("modul_g_kat_c_titel_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>verein_programm.modul_b_pa</code>.
     */
    public final TableField<VereinProgrammRecord, Boolean> MODUL_B_PA = createField(DSL.name("modul_b_pa"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein_programm.modul_b_egitarre</code>.
     */
    public final TableField<VereinProgrammRecord, Boolean> MODUL_B_EGITARRE = createField(DSL.name("modul_b_egitarre"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein_programm.modul_b_ebass</code>.
     */
    public final TableField<VereinProgrammRecord, Boolean> MODUL_B_EBASS = createField(DSL.name("modul_b_ebass"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein_programm.modul_b_keyboard</code>.
     */
    public final TableField<VereinProgrammRecord, Boolean> MODUL_B_KEYBOARD = createField(DSL.name("modul_b_keyboard"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein_programm.modul_b_gesang</code>.
     */
    public final TableField<VereinProgrammRecord, Boolean> MODUL_B_GESANG = createField(DSL.name("modul_b_gesang"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein_programm.modul_d_titel_1_id</code>.
     */
    public final TableField<VereinProgrammRecord, Long> MODUL_D_TITEL_1_ID = createField(DSL.name("modul_d_titel_1_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>verein_programm.modul_d_titel_2_id</code>.
     */
    public final TableField<VereinProgrammRecord, Long> MODUL_D_TITEL_2_ID = createField(DSL.name("modul_d_titel_2_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>verein_programm.scores_confirmed_by</code>.
     */
    public final TableField<VereinProgrammRecord, String> SCORES_CONFIRMED_BY = createField(DSL.name("scores_confirmed_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein_programm.scores_confirmed_at</code>.
     */
    public final TableField<VereinProgrammRecord, LocalDateTime> SCORES_CONFIRMED_AT = createField(DSL.name("scores_confirmed_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>verein_programm.modul_d_titel_selection</code>.
     */
    public final TableField<VereinProgrammRecord, String> MODUL_D_TITEL_SELECTION = createField(DSL.name("modul_d_titel_selection"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein_programm.minutes_overrun</code>.
     */
    public final TableField<VereinProgrammRecord, Integer> MINUTES_OVERRUN = createField(DSL.name("minutes_overrun"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>verein_programm.bonus</code>.
     */
    public final TableField<VereinProgrammRecord, BigDecimal> BONUS = createField(DSL.name("bonus"), SQLDataType.NUMERIC(3, 1), this, "");

    /**
     * The column <code>verein_programm.actual_duration_in_seconds</code>.
     */
    public final TableField<VereinProgrammRecord, Integer> ACTUAL_DURATION_IN_SECONDS = createField(DSL.name("actual_duration_in_seconds"), SQLDataType.INTEGER, this, "");

    private VereinProgramm(Name alias, Table<VereinProgrammRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private VereinProgramm(Name alias, Table<VereinProgrammRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>verein_programm</code> table reference
     */
    public VereinProgramm(String alias) {
        this(DSL.name(alias), VEREIN_PROGRAMM);
    }

    /**
     * Create an aliased <code>verein_programm</code> table reference
     */
    public VereinProgramm(Name alias) {
        this(alias, VEREIN_PROGRAMM);
    }

    /**
     * Create a <code>verein_programm</code> table reference
     */
    public VereinProgramm() {
        this(DSL.name("verein_programm"), null);
    }

    public <O extends Record> VereinProgramm(Table<O> path, ForeignKey<O, VereinProgrammRecord> childPath, InverseForeignKey<O, VereinProgrammRecord> parentPath) {
        super(path, childPath, parentPath, VEREIN_PROGRAMM);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class VereinProgrammPath extends VereinProgramm implements Path<VereinProgrammRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> VereinProgrammPath(Table<O> path, ForeignKey<O, VereinProgrammRecord> childPath, InverseForeignKey<O, VereinProgrammRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private VereinProgrammPath(Name alias, Table<VereinProgrammRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public VereinProgrammPath as(String alias) {
            return new VereinProgrammPath(DSL.name(alias), this);
        }

        @Override
        public VereinProgrammPath as(Name alias) {
            return new VereinProgrammPath(alias, this);
        }

        @Override
        public VereinProgrammPath as(Table<?> alias) {
            return new VereinProgrammPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FK_VEREIN_PROGRAMM_VEREIN);
    }

    @Override
    public Identity<VereinProgrammRecord, Long> getIdentity() {
        return (Identity<VereinProgrammRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VereinProgrammRecord> getPrimaryKey() {
        return Keys.PK_VEREIN_PROGRAMM;
    }

    @Override
    public List<ForeignKey<VereinProgrammRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VEREIN_PROGRAMM__FK_VEREIN_PROGRAMM_VEREIN);
    }

    private transient VereinPath _verein;

    /**
     * Get the implicit join path to the <code>public.verein</code> table.
     */
    public VereinPath verein() {
        if (_verein == null)
            _verein = new VereinPath(this, Keys.VEREIN_PROGRAMM__FK_VEREIN_PROGRAMM_VEREIN, null);

        return _verein;
    }

    private transient TimetableEntryPath _timetableEntry;

    /**
     * Get the implicit to-many join path to the
     * <code>public.timetable_entry</code> table
     */
    public TimetableEntryPath timetableEntry() {
        if (_timetableEntry == null)
            _timetableEntry = new TimetableEntryPath(this, null, Keys.TIMETABLE_ENTRY__FK_TIMETABLE_PROGRAMM.getInverseKey());

        return _timetableEntry;
    }

    private transient VereinProgrammTitelPath _vereinProgrammTitel;

    /**
     * Get the implicit to-many join path to the
     * <code>public.verein_programm_titel</code> table
     */
    public VereinProgrammTitelPath vereinProgrammTitel() {
        if (_vereinProgrammTitel == null)
            _vereinProgrammTitel = new VereinProgrammTitelPath(this, null, Keys.VEREIN_PROGRAMM_TITEL__FK_VEREIN_PROGRAMM_TITEL_PROGRAMM.getInverseKey());

        return _vereinProgrammTitel;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.titel</code>
     * table
     */
    public TitelPath titel() {
        return vereinProgrammTitel().titel();
    }

    @Override
    public VereinProgramm as(String alias) {
        return new VereinProgramm(DSL.name(alias), this);
    }

    @Override
    public VereinProgramm as(Name alias) {
        return new VereinProgramm(alias, this);
    }

    @Override
    public VereinProgramm as(Table<?> alias) {
        return new VereinProgramm(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VereinProgramm rename(String name) {
        return new VereinProgramm(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VereinProgramm rename(Name name) {
        return new VereinProgramm(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VereinProgramm rename(Table<?> name) {
        return new VereinProgramm(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinProgramm where(Condition condition) {
        return new VereinProgramm(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinProgramm where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinProgramm where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinProgramm where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VereinProgramm where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VereinProgramm where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VereinProgramm where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VereinProgramm where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinProgramm whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinProgramm whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
