/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables.daos;

import ch.zkmf2024.server.jooq.generated.tables.JudgeReportRating;
import ch.zkmf2024.server.jooq.generated.tables.pojos.JudgeReportRatingPojo;
import ch.zkmf2024.server.jooq.generated.tables.records.JudgeReportRatingRecord;
import org.jooq.Configuration;
import org.jooq.Record3;
import org.jooq.impl.DAOImpl;

import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class JudgeReportRatingDao extends DAOImpl<JudgeReportRatingRecord, JudgeReportRatingPojo, Record3<Long, Long, String>> {

    /**
     * Create a new JudgeReportRatingDao without any configuration
     */
    public JudgeReportRatingDao() {
        super(JudgeReportRating.JUDGE_REPORT_RATING, JudgeReportRatingPojo.class);
    }

    /**
     * Create a new JudgeReportRatingDao with an attached configuration
     */
    public JudgeReportRatingDao(Configuration configuration) {
        super(JudgeReportRating.JUDGE_REPORT_RATING, JudgeReportRatingPojo.class, configuration);
    }

    @Override
    public Record3<Long, Long, String> getId(JudgeReportRatingPojo object) {
        return compositeKeyRecord(object.getFkJudgeReport(), object.getFkTitel(), object.getCategory());
    }

    /**
     * Fetch records that have <code>fk_judge_report BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JudgeReportRatingPojo> fetchRangeOfFkJudgeReport(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JudgeReportRating.JUDGE_REPORT_RATING.FK_JUDGE_REPORT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fk_judge_report IN (values)</code>
     */
    public List<JudgeReportRatingPojo> fetchByFkJudgeReport(Long... values) {
        return fetch(JudgeReportRating.JUDGE_REPORT_RATING.FK_JUDGE_REPORT, values);
    }

    /**
     * Fetch records that have <code>fk_titel BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JudgeReportRatingPojo> fetchRangeOfFkTitel(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JudgeReportRating.JUDGE_REPORT_RATING.FK_TITEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fk_titel IN (values)</code>
     */
    public List<JudgeReportRatingPojo> fetchByFkTitel(Long... values) {
        return fetch(JudgeReportRating.JUDGE_REPORT_RATING.FK_TITEL, values);
    }

    /**
     * Fetch records that have <code>category BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JudgeReportRatingPojo> fetchRangeOfCategory(String lowerInclusive, String upperInclusive) {
        return fetchRange(JudgeReportRating.JUDGE_REPORT_RATING.CATEGORY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>category IN (values)</code>
     */
    public List<JudgeReportRatingPojo> fetchByCategory(String... values) {
        return fetch(JudgeReportRating.JUDGE_REPORT_RATING.CATEGORY, values);
    }

    /**
     * Fetch records that have <code>rating BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JudgeReportRatingPojo> fetchRangeOfRating(String lowerInclusive, String upperInclusive) {
        return fetchRange(JudgeReportRating.JUDGE_REPORT_RATING.RATING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rating IN (values)</code>
     */
    public List<JudgeReportRatingPojo> fetchByRating(String... values) {
        return fetch(JudgeReportRating.JUDGE_REPORT_RATING.RATING, values);
    }

    /**
     * Fetch records that have <code>comment BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JudgeReportRatingPojo> fetchRangeOfComment(String lowerInclusive, String upperInclusive) {
        return fetchRange(JudgeReportRating.JUDGE_REPORT_RATING.COMMENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>comment IN (values)</code>
     */
    public List<JudgeReportRatingPojo> fetchByComment(String... values) {
        return fetch(JudgeReportRating.JUDGE_REPORT_RATING.COMMENT, values);
    }
}
