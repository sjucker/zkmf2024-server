/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables.daos;

import ch.zkmf2024.server.jooq.generated.tables.CurrentlyPlaying;
import ch.zkmf2024.server.jooq.generated.tables.pojos.CurrentlyPlayingPojo;
import ch.zkmf2024.server.jooq.generated.tables.records.CurrentlyPlayingRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class CurrentlyPlayingDao extends DAOImpl<CurrentlyPlayingRecord, CurrentlyPlayingPojo, Long> {

    /**
     * Create a new CurrentlyPlayingDao without any configuration
     */
    public CurrentlyPlayingDao() {
        super(CurrentlyPlaying.CURRENTLY_PLAYING, CurrentlyPlayingPojo.class);
    }

    /**
     * Create a new CurrentlyPlayingDao with an attached configuration
     */
    public CurrentlyPlayingDao(Configuration configuration) {
        super(CurrentlyPlaying.CURRENTLY_PLAYING, CurrentlyPlayingPojo.class, configuration);
    }

    @Override
    public Long getId(CurrentlyPlayingPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<CurrentlyPlayingPojo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CurrentlyPlaying.CURRENTLY_PLAYING.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<CurrentlyPlayingPojo> fetchById(Long... values) {
        return fetch(CurrentlyPlaying.CURRENTLY_PLAYING.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public CurrentlyPlayingPojo fetchOneById(Long value) {
        return fetchOne(CurrentlyPlaying.CURRENTLY_PLAYING.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<CurrentlyPlayingPojo> fetchOptionalById(Long value) {
        return fetchOptional(CurrentlyPlaying.CURRENTLY_PLAYING.ID, value);
    }

    /**
     * Fetch records that have <code>fk_timetable_entry BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<CurrentlyPlayingPojo> fetchRangeOfFkTimetableEntry(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CurrentlyPlaying.CURRENTLY_PLAYING.FK_TIMETABLE_ENTRY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fk_timetable_entry IN (values)</code>
     */
    public List<CurrentlyPlayingPojo> fetchByFkTimetableEntry(Long... values) {
        return fetch(CurrentlyPlaying.CURRENTLY_PLAYING.FK_TIMETABLE_ENTRY, values);
    }

    /**
     * Fetch records that have <code>started_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<CurrentlyPlayingPojo> fetchRangeOfStartedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(CurrentlyPlaying.CURRENTLY_PLAYING.STARTED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>started_at IN (values)</code>
     */
    public List<CurrentlyPlayingPojo> fetchByStartedAt(LocalDateTime... values) {
        return fetch(CurrentlyPlaying.CURRENTLY_PLAYING.STARTED_AT, values);
    }

    /**
     * Fetch records that have <code>ended_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<CurrentlyPlayingPojo> fetchRangeOfEndedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(CurrentlyPlaying.CURRENTLY_PLAYING.ENDED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ended_at IN (values)</code>
     */
    public List<CurrentlyPlayingPojo> fetchByEndedAt(LocalDateTime... values) {
        return fetch(CurrentlyPlaying.CURRENTLY_PLAYING.ENDED_AT, values);
    }
}
