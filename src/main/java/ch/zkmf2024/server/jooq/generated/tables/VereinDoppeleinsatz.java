/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Indexes;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.Verein.VereinPath;
import ch.zkmf2024.server.jooq.generated.tables.records.VereinDoppeleinsatzRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class VereinDoppeleinsatz extends TableImpl<VereinDoppeleinsatzRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>verein_doppeleinsatz</code>
     */
    public static final VereinDoppeleinsatz VEREIN_DOPPELEINSATZ = new VereinDoppeleinsatz();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VereinDoppeleinsatzRecord> getRecordType() {
        return VereinDoppeleinsatzRecord.class;
    }

    /**
     * The column <code>verein_doppeleinsatz.id</code>.
     */
    public final TableField<VereinDoppeleinsatzRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>verein_doppeleinsatz.fk_verein</code>.
     */
    public final TableField<VereinDoppeleinsatzRecord, Long> FK_VEREIN = createField(DSL.name("fk_verein"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>verein_doppeleinsatz.fk_other_verein</code>.
     */
    public final TableField<VereinDoppeleinsatzRecord, Long> FK_OTHER_VEREIN = createField(DSL.name("fk_other_verein"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>verein_doppeleinsatz.name</code>.
     */
    public final TableField<VereinDoppeleinsatzRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private VereinDoppeleinsatz(Name alias, Table<VereinDoppeleinsatzRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private VereinDoppeleinsatz(Name alias, Table<VereinDoppeleinsatzRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>verein_doppeleinsatz</code> table reference
     */
    public VereinDoppeleinsatz(String alias) {
        this(DSL.name(alias), VEREIN_DOPPELEINSATZ);
    }

    /**
     * Create an aliased <code>verein_doppeleinsatz</code> table reference
     */
    public VereinDoppeleinsatz(Name alias) {
        this(alias, VEREIN_DOPPELEINSATZ);
    }

    /**
     * Create a <code>verein_doppeleinsatz</code> table reference
     */
    public VereinDoppeleinsatz() {
        this(DSL.name("verein_doppeleinsatz"), null);
    }

    public <O extends Record> VereinDoppeleinsatz(Table<O> path, ForeignKey<O, VereinDoppeleinsatzRecord> childPath, InverseForeignKey<O, VereinDoppeleinsatzRecord> parentPath) {
        super(path, childPath, parentPath, VEREIN_DOPPELEINSATZ);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class VereinDoppeleinsatzPath extends VereinDoppeleinsatz implements Path<VereinDoppeleinsatzRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> VereinDoppeleinsatzPath(Table<O> path, ForeignKey<O, VereinDoppeleinsatzRecord> childPath, InverseForeignKey<O, VereinDoppeleinsatzRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private VereinDoppeleinsatzPath(Name alias, Table<VereinDoppeleinsatzRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public VereinDoppeleinsatzPath as(String alias) {
            return new VereinDoppeleinsatzPath(DSL.name(alias), this);
        }

        @Override
        public VereinDoppeleinsatzPath as(Name alias) {
            return new VereinDoppeleinsatzPath(alias, this);
        }

        @Override
        public VereinDoppeleinsatzPath as(Table<?> alias) {
            return new VereinDoppeleinsatzPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FK_VEREIN_DOPPELEINSATZ_OTHER_VEREIN, Indexes.IDX_FK_VEREIN_DOPPELEINSATZ_VEREIN);
    }

    @Override
    public Identity<VereinDoppeleinsatzRecord, Long> getIdentity() {
        return (Identity<VereinDoppeleinsatzRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VereinDoppeleinsatzRecord> getPrimaryKey() {
        return Keys.PK_VEREIN_DOPPELEINSATZ;
    }

    @Override
    public List<ForeignKey<VereinDoppeleinsatzRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VEREIN_DOPPELEINSATZ__FK_VEREIN_DOPPELEINSATZ_OTHER_VEREIN, Keys.VEREIN_DOPPELEINSATZ__FK_VEREIN_DOPPELEINSATZ_VEREIN);
    }

    private transient VereinPath _fkVereinDoppeleinsatzOtherVerein;

    /**
     * Get the implicit join path to the <code>public.verein</code> table, via
     * the <code>fk_verein_doppeleinsatz_other_verein</code> key.
     */
    public VereinPath fkVereinDoppeleinsatzOtherVerein() {
        if (_fkVereinDoppeleinsatzOtherVerein == null)
            _fkVereinDoppeleinsatzOtherVerein = new VereinPath(this, Keys.VEREIN_DOPPELEINSATZ__FK_VEREIN_DOPPELEINSATZ_OTHER_VEREIN, null);

        return _fkVereinDoppeleinsatzOtherVerein;
    }

    private transient VereinPath _fkVereinDoppeleinsatzVerein;

    /**
     * Get the implicit join path to the <code>public.verein</code> table, via
     * the <code>fk_verein_doppeleinsatz_verein</code> key.
     */
    public VereinPath fkVereinDoppeleinsatzVerein() {
        if (_fkVereinDoppeleinsatzVerein == null)
            _fkVereinDoppeleinsatzVerein = new VereinPath(this, Keys.VEREIN_DOPPELEINSATZ__FK_VEREIN_DOPPELEINSATZ_VEREIN, null);

        return _fkVereinDoppeleinsatzVerein;
    }

    @Override
    public VereinDoppeleinsatz as(String alias) {
        return new VereinDoppeleinsatz(DSL.name(alias), this);
    }

    @Override
    public VereinDoppeleinsatz as(Name alias) {
        return new VereinDoppeleinsatz(alias, this);
    }

    @Override
    public VereinDoppeleinsatz as(Table<?> alias) {
        return new VereinDoppeleinsatz(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VereinDoppeleinsatz rename(String name) {
        return new VereinDoppeleinsatz(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VereinDoppeleinsatz rename(Name name) {
        return new VereinDoppeleinsatz(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VereinDoppeleinsatz rename(Table<?> name) {
        return new VereinDoppeleinsatz(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinDoppeleinsatz where(Condition condition) {
        return new VereinDoppeleinsatz(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinDoppeleinsatz where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinDoppeleinsatz where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinDoppeleinsatz where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VereinDoppeleinsatz where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VereinDoppeleinsatz where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VereinDoppeleinsatz where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VereinDoppeleinsatz where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinDoppeleinsatz whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinDoppeleinsatz whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
