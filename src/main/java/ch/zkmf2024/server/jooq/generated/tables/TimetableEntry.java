/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Indexes;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.records.TimetableEntryRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TimetableEntry extends TableImpl<TimetableEntryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>timetable_entry</code>
     */
    public static final TimetableEntry TIMETABLE_ENTRY = new TimetableEntry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TimetableEntryRecord> getRecordType() {
        return TimetableEntryRecord.class;
    }

    /**
     * The column <code>timetable_entry.id</code>.
     */
    public final TableField<TimetableEntryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>timetable_entry.fk_verein</code>.
     */
    public final TableField<TimetableEntryRecord, Long> FK_VEREIN = createField(DSL.name("fk_verein"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>timetable_entry.fk_verein_programm</code>.
     */
    public final TableField<TimetableEntryRecord, Long> FK_VEREIN_PROGRAMM = createField(DSL.name("fk_verein_programm"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>timetable_entry.fk_location</code>.
     */
    public final TableField<TimetableEntryRecord, Long> FK_LOCATION = createField(DSL.name("fk_location"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>timetable_entry.date</code>.
     */
    public final TableField<TimetableEntryRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>timetable_entry.start_time</code>.
     */
    public final TableField<TimetableEntryRecord, LocalTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALTIME(6).nullable(false), this, "");

    /**
     * The column <code>timetable_entry.end_time</code>.
     */
    public final TableField<TimetableEntryRecord, LocalTime> END_TIME = createField(DSL.name("end_time"), SQLDataType.LOCALTIME(6).nullable(false), this, "");

    private TimetableEntry(Name alias, Table<TimetableEntryRecord> aliased) {
        this(alias, aliased, null);
    }

    private TimetableEntry(Name alias, Table<TimetableEntryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>timetable_entry</code> table reference
     */
    public TimetableEntry(String alias) {
        this(DSL.name(alias), TIMETABLE_ENTRY);
    }

    /**
     * Create an aliased <code>timetable_entry</code> table reference
     */
    public TimetableEntry(Name alias) {
        this(alias, TIMETABLE_ENTRY);
    }

    /**
     * Create a <code>timetable_entry</code> table reference
     */
    public TimetableEntry() {
        this(DSL.name("timetable_entry"), null);
    }

    public <O extends Record> TimetableEntry(Table<O> child, ForeignKey<O, TimetableEntryRecord> key) {
        super(child, key, TIMETABLE_ENTRY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FK_TIMETABLE_LOCATION, Indexes.IDX_FK_TIMETABLE_PROGRAMM);
    }

    @Override
    public Identity<TimetableEntryRecord, Long> getIdentity() {
        return (Identity<TimetableEntryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TimetableEntryRecord> getPrimaryKey() {
        return Keys.PK_TIMETABLE_ENTRY;
    }

    @Override
    public List<UniqueKey<TimetableEntryRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.TIMETABLE_ENTRY_FK_VEREIN_FK_VEREIN_PROGRAMM_KEY);
    }

    @Override
    public List<ForeignKey<TimetableEntryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TIMETABLE_ENTRY__FK_TIMETABLE_VEREIN, Keys.TIMETABLE_ENTRY__FK_TIMETABLE_PROGRAMM, Keys.TIMETABLE_ENTRY__FK_TIMETABLE_LOCATION);
    }

    private transient Verein _verein;
    private transient VereinProgramm _vereinProgramm;
    private transient Location _location;

    /**
     * Get the implicit join path to the <code>public.verein</code> table.
     */
    public Verein verein() {
        if (_verein == null)
            _verein = new Verein(this, Keys.TIMETABLE_ENTRY__FK_TIMETABLE_VEREIN);

        return _verein;
    }

    /**
     * Get the implicit join path to the <code>public.verein_programm</code>
     * table.
     */
    public VereinProgramm vereinProgramm() {
        if (_vereinProgramm == null)
            _vereinProgramm = new VereinProgramm(this, Keys.TIMETABLE_ENTRY__FK_TIMETABLE_PROGRAMM);

        return _vereinProgramm;
    }

    /**
     * Get the implicit join path to the <code>public.location</code> table.
     */
    public Location location() {
        if (_location == null)
            _location = new Location(this, Keys.TIMETABLE_ENTRY__FK_TIMETABLE_LOCATION);

        return _location;
    }

    @Override
    public TimetableEntry as(String alias) {
        return new TimetableEntry(DSL.name(alias), this);
    }

    @Override
    public TimetableEntry as(Name alias) {
        return new TimetableEntry(alias, this);
    }

    @Override
    public TimetableEntry as(Table<?> alias) {
        return new TimetableEntry(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TimetableEntry rename(String name) {
        return new TimetableEntry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TimetableEntry rename(Name name) {
        return new TimetableEntry(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TimetableEntry rename(Table<?> name) {
        return new TimetableEntry(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, Long, LocalDate, LocalTime, LocalTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super Long, ? super Long, ? super Long, ? super LocalDate, ? super LocalTime, ? super LocalTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super Long, ? super Long, ? super Long, ? super LocalDate, ? super LocalTime, ? super LocalTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
