/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Indexes;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.records.JudgeReportRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class JudgeReport extends TableImpl<JudgeReportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>judge_report</code>
     */
    public static final JudgeReport JUDGE_REPORT = new JudgeReport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JudgeReportRecord> getRecordType() {
        return JudgeReportRecord.class;
    }

    /**
     * The column <code>judge_report.id</code>.
     */
    public final TableField<JudgeReportRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>judge_report.fk_judge</code>.
     */
    public final TableField<JudgeReportRecord, Long> FK_JUDGE = createField(DSL.name("fk_judge"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>judge_report.fk_timetable_entry</code>.
     */
    public final TableField<JudgeReportRecord, Long> FK_TIMETABLE_ENTRY = createField(DSL.name("fk_timetable_entry"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>judge_report.score</code>.
     */
    public final TableField<JudgeReportRecord, BigDecimal> SCORE = createField(DSL.name("score"), SQLDataType.NUMERIC(4, 1), this, "");

    /**
     * The column <code>judge_report.status</code>.
     */
    public final TableField<JudgeReportRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'NEW'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>judge_report.finished_at</code>.
     */
    public final TableField<JudgeReportRecord, LocalDateTime> FINISHED_AT = createField(DSL.name("finished_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>judge_report.rating_fixed</code>.
     */
    public final TableField<JudgeReportRecord, Boolean> RATING_FIXED = createField(DSL.name("rating_fixed"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>judge_report.role</code>.
     */
    public final TableField<JudgeReportRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("''::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>judge_report.category</code>.
     */
    public final TableField<JudgeReportRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR(255), this, "");

    private JudgeReport(Name alias, Table<JudgeReportRecord> aliased) {
        this(alias, aliased, null);
    }

    private JudgeReport(Name alias, Table<JudgeReportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>judge_report</code> table reference
     */
    public JudgeReport(String alias) {
        this(DSL.name(alias), JUDGE_REPORT);
    }

    /**
     * Create an aliased <code>judge_report</code> table reference
     */
    public JudgeReport(Name alias) {
        this(alias, JUDGE_REPORT);
    }

    /**
     * Create a <code>judge_report</code> table reference
     */
    public JudgeReport() {
        this(DSL.name("judge_report"), null);
    }

    public <O extends Record> JudgeReport(Table<O> child, ForeignKey<O, JudgeReportRecord> key) {
        super(child, key, JUDGE_REPORT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FK_JUDGE_REPORT_TIMETABLE);
    }

    @Override
    public Identity<JudgeReportRecord, Long> getIdentity() {
        return (Identity<JudgeReportRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JudgeReportRecord> getPrimaryKey() {
        return Keys.PK_JUDGE_REPORT;
    }

    @Override
    public List<UniqueKey<JudgeReportRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_JUDGE_REPORT);
    }

    @Override
    public List<ForeignKey<JudgeReportRecord, ?>> getReferences() {
        return Arrays.asList(Keys.JUDGE_REPORT__FK_JUDGE_REPORT_JUDGE, Keys.JUDGE_REPORT__FK_JUDGE_REPORT_TIMETABLE);
    }

    private transient Judge _judge;
    private transient TimetableEntry _timetableEntry;

    /**
     * Get the implicit join path to the <code>public.judge</code> table.
     */
    public Judge judge() {
        if (_judge == null)
            _judge = new Judge(this, Keys.JUDGE_REPORT__FK_JUDGE_REPORT_JUDGE);

        return _judge;
    }

    /**
     * Get the implicit join path to the <code>public.timetable_entry</code>
     * table.
     */
    public TimetableEntry timetableEntry() {
        if (_timetableEntry == null)
            _timetableEntry = new TimetableEntry(this, Keys.JUDGE_REPORT__FK_JUDGE_REPORT_TIMETABLE);

        return _timetableEntry;
    }

    @Override
    public JudgeReport as(String alias) {
        return new JudgeReport(DSL.name(alias), this);
    }

    @Override
    public JudgeReport as(Name alias) {
        return new JudgeReport(alias, this);
    }

    @Override
    public JudgeReport as(Table<?> alias) {
        return new JudgeReport(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JudgeReport rename(String name) {
        return new JudgeReport(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JudgeReport rename(Name name) {
        return new JudgeReport(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JudgeReport rename(Table<?> name) {
        return new JudgeReport(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Long, BigDecimal, String, LocalDateTime, Boolean, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super Long, ? super Long, ? super BigDecimal, ? super String, ? super LocalDateTime, ? super Boolean, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super Long, ? super Long, ? super BigDecimal, ? super String, ? super LocalDateTime, ? super Boolean, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
