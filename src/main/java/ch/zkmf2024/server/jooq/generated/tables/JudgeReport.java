/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Indexes;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.Judge.JudgePath;
import ch.zkmf2024.server.jooq.generated.tables.JudgeReportComment.JudgeReportCommentPath;
import ch.zkmf2024.server.jooq.generated.tables.JudgeReportRating.JudgeReportRatingPath;
import ch.zkmf2024.server.jooq.generated.tables.TimetableEntry.TimetableEntryPath;
import ch.zkmf2024.server.jooq.generated.tables.Titel.TitelPath;
import ch.zkmf2024.server.jooq.generated.tables.records.JudgeReportRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class JudgeReport extends TableImpl<JudgeReportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>judge_report</code>
     */
    public static final JudgeReport JUDGE_REPORT = new JudgeReport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JudgeReportRecord> getRecordType() {
        return JudgeReportRecord.class;
    }

    /**
     * The column <code>judge_report.id</code>.
     */
    public final TableField<JudgeReportRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>judge_report.fk_judge</code>.
     */
    public final TableField<JudgeReportRecord, Long> FK_JUDGE = createField(DSL.name("fk_judge"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>judge_report.fk_timetable_entry</code>.
     */
    public final TableField<JudgeReportRecord, Long> FK_TIMETABLE_ENTRY = createField(DSL.name("fk_timetable_entry"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>judge_report.score</code>.
     */
    public final TableField<JudgeReportRecord, BigDecimal> SCORE = createField(DSL.name("score"), SQLDataType.NUMERIC(4, 1), this, "");

    /**
     * The column <code>judge_report.status</code>.
     */
    public final TableField<JudgeReportRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'NEW'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>judge_report.finished_at</code>.
     */
    public final TableField<JudgeReportRecord, LocalDateTime> FINISHED_AT = createField(DSL.name("finished_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>judge_report.rating_fixed</code>.
     */
    public final TableField<JudgeReportRecord, Boolean> RATING_FIXED = createField(DSL.name("rating_fixed"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>judge_report.role</code>.
     */
    public final TableField<JudgeReportRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("''::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>judge_report.category</code>.
     */
    public final TableField<JudgeReportRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR(255), this, "");

    private JudgeReport(Name alias, Table<JudgeReportRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JudgeReport(Name alias, Table<JudgeReportRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>judge_report</code> table reference
     */
    public JudgeReport(String alias) {
        this(DSL.name(alias), JUDGE_REPORT);
    }

    /**
     * Create an aliased <code>judge_report</code> table reference
     */
    public JudgeReport(Name alias) {
        this(alias, JUDGE_REPORT);
    }

    /**
     * Create a <code>judge_report</code> table reference
     */
    public JudgeReport() {
        this(DSL.name("judge_report"), null);
    }

    public <O extends Record> JudgeReport(Table<O> path, ForeignKey<O, JudgeReportRecord> childPath, InverseForeignKey<O, JudgeReportRecord> parentPath) {
        super(path, childPath, parentPath, JUDGE_REPORT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JudgeReportPath extends JudgeReport implements Path<JudgeReportRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> JudgeReportPath(Table<O> path, ForeignKey<O, JudgeReportRecord> childPath, InverseForeignKey<O, JudgeReportRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private JudgeReportPath(Name alias, Table<JudgeReportRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JudgeReportPath as(String alias) {
            return new JudgeReportPath(DSL.name(alias), this);
        }

        @Override
        public JudgeReportPath as(Name alias) {
            return new JudgeReportPath(alias, this);
        }

        @Override
        public JudgeReportPath as(Table<?> alias) {
            return new JudgeReportPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FK_JUDGE_REPORT_TIMETABLE);
    }

    @Override
    public Identity<JudgeReportRecord, Long> getIdentity() {
        return (Identity<JudgeReportRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JudgeReportRecord> getPrimaryKey() {
        return Keys.PK_JUDGE_REPORT;
    }

    @Override
    public List<UniqueKey<JudgeReportRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_JUDGE_REPORT);
    }

    @Override
    public List<ForeignKey<JudgeReportRecord, ?>> getReferences() {
        return Arrays.asList(Keys.JUDGE_REPORT__FK_JUDGE_REPORT_JUDGE, Keys.JUDGE_REPORT__FK_JUDGE_REPORT_TIMETABLE);
    }

    private transient JudgePath _judge;

    /**
     * Get the implicit join path to the <code>public.judge</code> table.
     */
    public JudgePath judge() {
        if (_judge == null)
            _judge = new JudgePath(this, Keys.JUDGE_REPORT__FK_JUDGE_REPORT_JUDGE, null);

        return _judge;
    }

    private transient TimetableEntryPath _timetableEntry;

    /**
     * Get the implicit join path to the <code>public.timetable_entry</code>
     * table.
     */
    public TimetableEntryPath timetableEntry() {
        if (_timetableEntry == null)
            _timetableEntry = new TimetableEntryPath(this, Keys.JUDGE_REPORT__FK_JUDGE_REPORT_TIMETABLE, null);

        return _timetableEntry;
    }

    private transient JudgeReportCommentPath _judgeReportComment;

    /**
     * Get the implicit to-many join path to the
     * <code>public.judge_report_comment</code> table
     */
    public JudgeReportCommentPath judgeReportComment() {
        if (_judgeReportComment == null)
            _judgeReportComment = new JudgeReportCommentPath(this, null, Keys.JUDGE_REPORT_COMMENT__FK_JUDGE_REPORT_COMMENT_REPORT.getInverseKey());

        return _judgeReportComment;
    }

    private transient JudgeReportRatingPath _judgeReportRating;

    /**
     * Get the implicit to-many join path to the
     * <code>public.judge_report_rating</code> table
     */
    public JudgeReportRatingPath judgeReportRating() {
        if (_judgeReportRating == null)
            _judgeReportRating = new JudgeReportRatingPath(this, null, Keys.JUDGE_REPORT_RATING__FK_JUDGE_REPORT_RATING_REPORT.getInverseKey());

        return _judgeReportRating;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.titel</code>
     * table
     */
    public TitelPath titel() {
        return judgeReportComment().titel();
    }

    @Override
    public JudgeReport as(String alias) {
        return new JudgeReport(DSL.name(alias), this);
    }

    @Override
    public JudgeReport as(Name alias) {
        return new JudgeReport(alias, this);
    }

    @Override
    public JudgeReport as(Table<?> alias) {
        return new JudgeReport(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JudgeReport rename(String name) {
        return new JudgeReport(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JudgeReport rename(Name name) {
        return new JudgeReport(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JudgeReport rename(Table<?> name) {
        return new JudgeReport(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JudgeReport where(Condition condition) {
        return new JudgeReport(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JudgeReport where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JudgeReport where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JudgeReport where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JudgeReport where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JudgeReport where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JudgeReport where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JudgeReport where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JudgeReport whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JudgeReport whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
