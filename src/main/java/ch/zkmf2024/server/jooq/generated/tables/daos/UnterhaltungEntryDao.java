/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables.daos;

import ch.zkmf2024.server.jooq.generated.enums.UnterhaltungEntryType;
import ch.zkmf2024.server.jooq.generated.tables.UnterhaltungEntry;
import ch.zkmf2024.server.jooq.generated.tables.pojos.UnterhaltungEntryPojo;
import ch.zkmf2024.server.jooq.generated.tables.records.UnterhaltungEntryRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import java.util.Optional;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class UnterhaltungEntryDao extends DAOImpl<UnterhaltungEntryRecord, UnterhaltungEntryPojo, Long> {

    /**
     * Create a new UnterhaltungEntryDao without any configuration
     */
    public UnterhaltungEntryDao() {
        super(UnterhaltungEntry.UNTERHALTUNG_ENTRY, UnterhaltungEntryPojo.class);
    }

    /**
     * Create a new UnterhaltungEntryDao with an attached configuration
     */
    public UnterhaltungEntryDao(Configuration configuration) {
        super(UnterhaltungEntry.UNTERHALTUNG_ENTRY, UnterhaltungEntryPojo.class, configuration);
    }

    @Override
    public Long getId(UnterhaltungEntryPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UnterhaltungEntryPojo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UnterhaltungEntry.UNTERHALTUNG_ENTRY.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<UnterhaltungEntryPojo> fetchById(Long... values) {
        return fetch(UnterhaltungEntry.UNTERHALTUNG_ENTRY.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public UnterhaltungEntryPojo fetchOneById(Long value) {
        return fetchOne(UnterhaltungEntry.UNTERHALTUNG_ENTRY.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<UnterhaltungEntryPojo> fetchOptionalById(Long value) {
        return fetchOptional(UnterhaltungEntry.UNTERHALTUNG_ENTRY.ID, value);
    }

    /**
     * Fetch records that have <code>entry_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UnterhaltungEntryPojo> fetchRangeOfEntryType(UnterhaltungEntryType lowerInclusive, UnterhaltungEntryType upperInclusive) {
        return fetchRange(UnterhaltungEntry.UNTERHALTUNG_ENTRY.ENTRY_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>entry_type IN (values)</code>
     */
    public List<UnterhaltungEntryPojo> fetchByEntryType(UnterhaltungEntryType... values) {
        return fetch(UnterhaltungEntry.UNTERHALTUNG_ENTRY.ENTRY_TYPE, values);
    }

    /**
     * Fetch records that have <code>date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UnterhaltungEntryPojo> fetchRangeOfDate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(UnterhaltungEntry.UNTERHALTUNG_ENTRY.DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>date IN (values)</code>
     */
    public List<UnterhaltungEntryPojo> fetchByDate(LocalDate... values) {
        return fetch(UnterhaltungEntry.UNTERHALTUNG_ENTRY.DATE, values);
    }

    /**
     * Fetch records that have <code>start_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UnterhaltungEntryPojo> fetchRangeOfStartTime(LocalTime lowerInclusive, LocalTime upperInclusive) {
        return fetchRange(UnterhaltungEntry.UNTERHALTUNG_ENTRY.START_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>start_time IN (values)</code>
     */
    public List<UnterhaltungEntryPojo> fetchByStartTime(LocalTime... values) {
        return fetch(UnterhaltungEntry.UNTERHALTUNG_ENTRY.START_TIME, values);
    }

    /**
     * Fetch records that have <code>end_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UnterhaltungEntryPojo> fetchRangeOfEndTime(LocalTime lowerInclusive, LocalTime upperInclusive) {
        return fetchRange(UnterhaltungEntry.UNTERHALTUNG_ENTRY.END_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>end_time IN (values)</code>
     */
    public List<UnterhaltungEntryPojo> fetchByEndTime(LocalTime... values) {
        return fetch(UnterhaltungEntry.UNTERHALTUNG_ENTRY.END_TIME, values);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UnterhaltungEntryPojo> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(UnterhaltungEntry.UNTERHALTUNG_ENTRY.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<UnterhaltungEntryPojo> fetchByTitle(String... values) {
        return fetch(UnterhaltungEntry.UNTERHALTUNG_ENTRY.TITLE, values);
    }

    /**
     * Fetch records that have <code>subtitle BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UnterhaltungEntryPojo> fetchRangeOfSubtitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(UnterhaltungEntry.UNTERHALTUNG_ENTRY.SUBTITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>subtitle IN (values)</code>
     */
    public List<UnterhaltungEntryPojo> fetchBySubtitle(String... values) {
        return fetch(UnterhaltungEntry.UNTERHALTUNG_ENTRY.SUBTITLE, values);
    }

    /**
     * Fetch records that have <code>fk_location BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UnterhaltungEntryPojo> fetchRangeOfFkLocation(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UnterhaltungEntry.UNTERHALTUNG_ENTRY.FK_LOCATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fk_location IN (values)</code>
     */
    public List<UnterhaltungEntryPojo> fetchByFkLocation(Long... values) {
        return fetch(UnterhaltungEntry.UNTERHALTUNG_ENTRY.FK_LOCATION, values);
    }

    /**
     * Fetch records that have <code>cloudflare_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UnterhaltungEntryPojo> fetchRangeOfCloudflareId(String lowerInclusive, String upperInclusive) {
        return fetchRange(UnterhaltungEntry.UNTERHALTUNG_ENTRY.CLOUDFLARE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cloudflare_id IN (values)</code>
     */
    public List<UnterhaltungEntryPojo> fetchByCloudflareId(String... values) {
        return fetch(UnterhaltungEntry.UNTERHALTUNG_ENTRY.CLOUDFLARE_ID, values);
    }

    /**
     * Fetch records that have <code>text BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UnterhaltungEntryPojo> fetchRangeOfText(String lowerInclusive, String upperInclusive) {
        return fetchRange(UnterhaltungEntry.UNTERHALTUNG_ENTRY.TEXT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>text IN (values)</code>
     */
    public List<UnterhaltungEntryPojo> fetchByText(String... values) {
        return fetch(UnterhaltungEntry.UNTERHALTUNG_ENTRY.TEXT, values);
    }

    /**
     * Fetch records that have <code>identifier BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UnterhaltungEntryPojo> fetchRangeOfIdentifier(String lowerInclusive, String upperInclusive) {
        return fetchRange(UnterhaltungEntry.UNTERHALTUNG_ENTRY.IDENTIFIER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>identifier IN (values)</code>
     */
    public List<UnterhaltungEntryPojo> fetchByIdentifier(String... values) {
        return fetch(UnterhaltungEntry.UNTERHALTUNG_ENTRY.IDENTIFIER, values);
    }
}
