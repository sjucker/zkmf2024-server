/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables.daos;

import ch.zkmf2024.server.jooq.generated.tables.RankingEntry;
import ch.zkmf2024.server.jooq.generated.tables.pojos.RankingEntryPojo;
import ch.zkmf2024.server.jooq.generated.tables.records.RankingEntryRecord;
import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class RankingEntryDao extends DAOImpl<RankingEntryRecord, RankingEntryPojo, Record2<Long, Long>> {

    /**
     * Create a new RankingEntryDao without any configuration
     */
    public RankingEntryDao() {
        super(RankingEntry.RANKING_ENTRY, RankingEntryPojo.class);
    }

    /**
     * Create a new RankingEntryDao with an attached configuration
     */
    public RankingEntryDao(Configuration configuration) {
        super(RankingEntry.RANKING_ENTRY, RankingEntryPojo.class, configuration);
    }

    @Override
    public Record2<Long, Long> getId(RankingEntryPojo object) {
        return compositeKeyRecord(object.getFkRanking(), object.getFkVerein());
    }

    /**
     * Fetch records that have <code>fk_ranking BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RankingEntryPojo> fetchRangeOfFkRanking(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(RankingEntry.RANKING_ENTRY.FK_RANKING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fk_ranking IN (values)</code>
     */
    public List<RankingEntryPojo> fetchByFkRanking(Long... values) {
        return fetch(RankingEntry.RANKING_ENTRY.FK_RANKING, values);
    }

    /**
     * Fetch records that have <code>fk_verein BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RankingEntryPojo> fetchRangeOfFkVerein(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(RankingEntry.RANKING_ENTRY.FK_VEREIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fk_verein IN (values)</code>
     */
    public List<RankingEntryPojo> fetchByFkVerein(Long... values) {
        return fetch(RankingEntry.RANKING_ENTRY.FK_VEREIN, values);
    }

    /**
     * Fetch records that have <code>score BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RankingEntryPojo> fetchRangeOfScore(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(RankingEntry.RANKING_ENTRY.SCORE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>score IN (values)</code>
     */
    public List<RankingEntryPojo> fetchByScore(BigDecimal... values) {
        return fetch(RankingEntry.RANKING_ENTRY.SCORE, values);
    }

    /**
     * Fetch records that have <code>rank BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RankingEntryPojo> fetchRangeOfRank(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(RankingEntry.RANKING_ENTRY.RANK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rank IN (values)</code>
     */
    public List<RankingEntryPojo> fetchByRank(Integer... values) {
        return fetch(RankingEntry.RANKING_ENTRY.RANK, values);
    }

    /**
     * Fetch records that have <code>confirmed_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RankingEntryPojo> fetchRangeOfConfirmedBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(RankingEntry.RANKING_ENTRY.CONFIRMED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>confirmed_by IN (values)</code>
     */
    public List<RankingEntryPojo> fetchByConfirmedBy(String... values) {
        return fetch(RankingEntry.RANKING_ENTRY.CONFIRMED_BY, values);
    }

    /**
     * Fetch records that have <code>confirmed_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RankingEntryPojo> fetchRangeOfConfirmedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(RankingEntry.RANKING_ENTRY.CONFIRMED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>confirmed_at IN (values)</code>
     */
    public List<RankingEntryPojo> fetchByConfirmedAt(LocalDateTime... values) {
        return fetch(RankingEntry.RANKING_ENTRY.CONFIRMED_AT, values);
    }

    /**
     * Fetch records that have <code>additional_info BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RankingEntryPojo> fetchRangeOfAdditionalInfo(String lowerInclusive, String upperInclusive) {
        return fetchRange(RankingEntry.RANKING_ENTRY.ADDITIONAL_INFO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>additional_info IN (values)</code>
     */
    public List<RankingEntryPojo> fetchByAdditionalInfo(String... values) {
        return fetch(RankingEntry.RANKING_ENTRY.ADDITIONAL_INFO, values);
    }
}
