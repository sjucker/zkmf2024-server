/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables.daos;

import ch.zkmf2024.server.jooq.generated.enums.TimetableEntryType;
import ch.zkmf2024.server.jooq.generated.tables.TimetableEntry;
import ch.zkmf2024.server.jooq.generated.tables.pojos.TimetableEntryPojo;
import ch.zkmf2024.server.jooq.generated.tables.records.TimetableEntryRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import java.util.Optional;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TimetableEntryDao extends DAOImpl<TimetableEntryRecord, TimetableEntryPojo, Long> {

    /**
     * Create a new TimetableEntryDao without any configuration
     */
    public TimetableEntryDao() {
        super(TimetableEntry.TIMETABLE_ENTRY, TimetableEntryPojo.class);
    }

    /**
     * Create a new TimetableEntryDao with an attached configuration
     */
    public TimetableEntryDao(Configuration configuration) {
        super(TimetableEntry.TIMETABLE_ENTRY, TimetableEntryPojo.class, configuration);
    }

    @Override
    public Long getId(TimetableEntryPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TimetableEntryPojo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TimetableEntry.TIMETABLE_ENTRY.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<TimetableEntryPojo> fetchById(Long... values) {
        return fetch(TimetableEntry.TIMETABLE_ENTRY.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public TimetableEntryPojo fetchOneById(Long value) {
        return fetchOne(TimetableEntry.TIMETABLE_ENTRY.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<TimetableEntryPojo> fetchOptionalById(Long value) {
        return fetchOptional(TimetableEntry.TIMETABLE_ENTRY.ID, value);
    }

    /**
     * Fetch records that have <code>fk_verein BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TimetableEntryPojo> fetchRangeOfFkVerein(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TimetableEntry.TIMETABLE_ENTRY.FK_VEREIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fk_verein IN (values)</code>
     */
    public List<TimetableEntryPojo> fetchByFkVerein(Long... values) {
        return fetch(TimetableEntry.TIMETABLE_ENTRY.FK_VEREIN, values);
    }

    /**
     * Fetch records that have <code>fk_verein_programm BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<TimetableEntryPojo> fetchRangeOfFkVereinProgramm(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TimetableEntry.TIMETABLE_ENTRY.FK_VEREIN_PROGRAMM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fk_verein_programm IN (values)</code>
     */
    public List<TimetableEntryPojo> fetchByFkVereinProgramm(Long... values) {
        return fetch(TimetableEntry.TIMETABLE_ENTRY.FK_VEREIN_PROGRAMM, values);
    }

    /**
     * Fetch records that have <code>fk_location BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TimetableEntryPojo> fetchRangeOfFkLocation(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TimetableEntry.TIMETABLE_ENTRY.FK_LOCATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fk_location IN (values)</code>
     */
    public List<TimetableEntryPojo> fetchByFkLocation(Long... values) {
        return fetch(TimetableEntry.TIMETABLE_ENTRY.FK_LOCATION, values);
    }

    /**
     * Fetch records that have <code>date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TimetableEntryPojo> fetchRangeOfDate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(TimetableEntry.TIMETABLE_ENTRY.DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>date IN (values)</code>
     */
    public List<TimetableEntryPojo> fetchByDate(LocalDate... values) {
        return fetch(TimetableEntry.TIMETABLE_ENTRY.DATE, values);
    }

    /**
     * Fetch records that have <code>start_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TimetableEntryPojo> fetchRangeOfStartTime(LocalTime lowerInclusive, LocalTime upperInclusive) {
        return fetchRange(TimetableEntry.TIMETABLE_ENTRY.START_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>start_time IN (values)</code>
     */
    public List<TimetableEntryPojo> fetchByStartTime(LocalTime... values) {
        return fetch(TimetableEntry.TIMETABLE_ENTRY.START_TIME, values);
    }

    /**
     * Fetch records that have <code>end_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TimetableEntryPojo> fetchRangeOfEndTime(LocalTime lowerInclusive, LocalTime upperInclusive) {
        return fetchRange(TimetableEntry.TIMETABLE_ENTRY.END_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>end_time IN (values)</code>
     */
    public List<TimetableEntryPojo> fetchByEndTime(LocalTime... values) {
        return fetch(TimetableEntry.TIMETABLE_ENTRY.END_TIME, values);
    }

    /**
     * Fetch records that have <code>entry_type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TimetableEntryPojo> fetchRangeOfEntryType(TimetableEntryType lowerInclusive, TimetableEntryType upperInclusive) {
        return fetchRange(TimetableEntry.TIMETABLE_ENTRY.ENTRY_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>entry_type IN (values)</code>
     */
    public List<TimetableEntryPojo> fetchByEntryType(TimetableEntryType... values) {
        return fetch(TimetableEntry.TIMETABLE_ENTRY.ENTRY_TYPE, values);
    }
}
