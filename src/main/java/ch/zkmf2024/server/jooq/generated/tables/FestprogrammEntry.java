/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.records.FestprogrammEntryRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.function.Function;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class FestprogrammEntry extends TableImpl<FestprogrammEntryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>festprogramm_entry</code>
     */
    public static final FestprogrammEntry FESTPROGRAMM_ENTRY = new FestprogrammEntry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FestprogrammEntryRecord> getRecordType() {
        return FestprogrammEntryRecord.class;
    }

    /**
     * The column <code>festprogramm_entry.id</code>.
     */
    public final TableField<FestprogrammEntryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>festprogramm_entry.date</code>.
     */
    public final TableField<FestprogrammEntryRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>festprogramm_entry.start_time</code>.
     */
    public final TableField<FestprogrammEntryRecord, LocalTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALTIME(6).nullable(false), this, "");

    /**
     * The column <code>festprogramm_entry.description</code>.
     */
    public final TableField<FestprogrammEntryRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>festprogramm_entry.location</code>.
     */
    public final TableField<FestprogrammEntryRecord, String> LOCATION = createField(DSL.name("location"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>festprogramm_entry.important</code>.
     */
    public final TableField<FestprogrammEntryRecord, Boolean> IMPORTANT = createField(DSL.name("important"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>festprogramm_entry.end_time</code>.
     */
    public final TableField<FestprogrammEntryRecord, LocalTime> END_TIME = createField(DSL.name("end_time"), SQLDataType.LOCALTIME(6), this, "");

    private FestprogrammEntry(Name alias, Table<FestprogrammEntryRecord> aliased) {
        this(alias, aliased, null);
    }

    private FestprogrammEntry(Name alias, Table<FestprogrammEntryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>festprogramm_entry</code> table reference
     */
    public FestprogrammEntry(String alias) {
        this(DSL.name(alias), FESTPROGRAMM_ENTRY);
    }

    /**
     * Create an aliased <code>festprogramm_entry</code> table reference
     */
    public FestprogrammEntry(Name alias) {
        this(alias, FESTPROGRAMM_ENTRY);
    }

    /**
     * Create a <code>festprogramm_entry</code> table reference
     */
    public FestprogrammEntry() {
        this(DSL.name("festprogramm_entry"), null);
    }

    public <O extends Record> FestprogrammEntry(Table<O> child, ForeignKey<O, FestprogrammEntryRecord> key) {
        super(child, key, FESTPROGRAMM_ENTRY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<FestprogrammEntryRecord, Long> getIdentity() {
        return (Identity<FestprogrammEntryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FestprogrammEntryRecord> getPrimaryKey() {
        return Keys.PK_FESTPROGRAMM_ENTRY;
    }

    @Override
    public FestprogrammEntry as(String alias) {
        return new FestprogrammEntry(DSL.name(alias), this);
    }

    @Override
    public FestprogrammEntry as(Name alias) {
        return new FestprogrammEntry(alias, this);
    }

    @Override
    public FestprogrammEntry as(Table<?> alias) {
        return new FestprogrammEntry(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FestprogrammEntry rename(String name) {
        return new FestprogrammEntry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FestprogrammEntry rename(Name name) {
        return new FestprogrammEntry(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FestprogrammEntry rename(Table<?> name) {
        return new FestprogrammEntry(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, LocalDate, LocalTime, String, String, Boolean, LocalTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super LocalDate, ? super LocalTime, ? super String, ? super String, ? super Boolean, ? super LocalTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super LocalDate, ? super LocalTime, ? super String, ? super String, ? super Boolean, ? super LocalTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
