/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables.records;

import ch.zkmf2024.server.jooq.generated.tables.CurrentlyPlaying;
import ch.zkmf2024.server.jooq.generated.tables.interfaces.ICurrentlyPlaying;
import ch.zkmf2024.server.jooq.generated.tables.pojos.CurrentlyPlayingPojo;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.LocalDateTime;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class CurrentlyPlayingRecord extends UpdatableRecordImpl<CurrentlyPlayingRecord> implements ICurrentlyPlaying {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>currently_playing.id</code>.
     */
    @Override
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>currently_playing.id</code>.
     */
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>currently_playing.fk_timetable_entry</code>.
     */
    @Override
    public void setFkTimetableEntry(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>currently_playing.fk_timetable_entry</code>.
     */
    @Override
    public Long getFkTimetableEntry() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>currently_playing.started_at</code>.
     */
    @Override
    public void setStartedAt(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>currently_playing.started_at</code>.
     */
    @Override
    public LocalDateTime getStartedAt() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>currently_playing.ended_at</code>.
     */
    @Override
    public void setEndedAt(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>currently_playing.ended_at</code>.
     */
    @Override
    public LocalDateTime getEndedAt() {
        return (LocalDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ICurrentlyPlaying from) {
        setId(from.getId());
        setFkTimetableEntry(from.getFkTimetableEntry());
        setStartedAt(from.getStartedAt());
        setEndedAt(from.getEndedAt());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends ICurrentlyPlaying> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CurrentlyPlayingRecord
     */
    public CurrentlyPlayingRecord() {
        super(CurrentlyPlaying.CURRENTLY_PLAYING);
    }

    /**
     * Create a detached, initialised CurrentlyPlayingRecord
     */
    public CurrentlyPlayingRecord(Long id, Long fkTimetableEntry, LocalDateTime startedAt, LocalDateTime endedAt) {
        super(CurrentlyPlaying.CURRENTLY_PLAYING);

        setId(id);
        setFkTimetableEntry(fkTimetableEntry);
        setStartedAt(startedAt);
        setEndedAt(endedAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised CurrentlyPlayingRecord
     */
    public CurrentlyPlayingRecord(CurrentlyPlayingPojo value) {
        super(CurrentlyPlaying.CURRENTLY_PLAYING);

        if (value != null) {
            setId(value.getId());
            setFkTimetableEntry(value.getFkTimetableEntry());
            setStartedAt(value.getStartedAt());
            setEndedAt(value.getEndedAt());
            resetChangedOnNotNull();
        }
    }
}
