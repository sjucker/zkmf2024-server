/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.records.HelperRegistrationRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class HelperRegistration extends TableImpl<HelperRegistrationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>helper_registration</code>
     */
    public static final HelperRegistration HELPER_REGISTRATION = new HelperRegistration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HelperRegistrationRecord> getRecordType() {
        return HelperRegistrationRecord.class;
    }

    /**
     * The column <code>helper_registration.id</code>.
     */
    public final TableField<HelperRegistrationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>helper_registration.vorname</code>.
     */
    public final TableField<HelperRegistrationRecord, String> VORNAME = createField(DSL.name("vorname"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>helper_registration.name</code>.
     */
    public final TableField<HelperRegistrationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>helper_registration.email</code>.
     */
    public final TableField<HelperRegistrationRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>helper_registration.telefon</code>.
     */
    public final TableField<HelperRegistrationRecord, String> TELEFON = createField(DSL.name("telefon"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>helper_registration.comment</code>.
     */
    public final TableField<HelperRegistrationRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>helper_registration.adresse</code>.
     */
    public final TableField<HelperRegistrationRecord, String> ADRESSE = createField(DSL.name("adresse"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>helper_registration.plz_ort</code>.
     */
    public final TableField<HelperRegistrationRecord, String> PLZ_ORT = createField(DSL.name("plz_ort"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>helper_registration.geburtsdatum</code>.
     */
    public final TableField<HelperRegistrationRecord, LocalDate> GEBURTSDATUM = createField(DSL.name("geburtsdatum"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>helper_registration.vereinszugehoerigkeit</code>.
     */
    public final TableField<HelperRegistrationRecord, String> VEREINSZUGEHOERIGKEIT = createField(DSL.name("vereinszugehoerigkeit"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>helper_registration.aufgaben</code>.
     */
    public final TableField<HelperRegistrationRecord, String> AUFGABEN = createField(DSL.name("aufgaben"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>helper_registration.anzahl_einsaetze</code>.
     */
    public final TableField<HelperRegistrationRecord, String> ANZAHL_EINSAETZE = createField(DSL.name("anzahl_einsaetze"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>helper_registration.einsatz_mittwoch</code>.
     */
    public final TableField<HelperRegistrationRecord, String> EINSATZ_MITTWOCH = createField(DSL.name("einsatz_mittwoch"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>helper_registration.einsatz_donnerstag</code>.
     */
    public final TableField<HelperRegistrationRecord, String> EINSATZ_DONNERSTAG = createField(DSL.name("einsatz_donnerstag"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>helper_registration.einsatz_freitag</code>.
     */
    public final TableField<HelperRegistrationRecord, String> EINSATZ_FREITAG = createField(DSL.name("einsatz_freitag"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>helper_registration.einsatz_samstag</code>.
     */
    public final TableField<HelperRegistrationRecord, String> EINSATZ_SAMSTAG = createField(DSL.name("einsatz_samstag"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>helper_registration.einsatz_sonntag</code>.
     */
    public final TableField<HelperRegistrationRecord, String> EINSATZ_SONNTAG = createField(DSL.name("einsatz_sonntag"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>helper_registration.einsatz_montag</code>.
     */
    public final TableField<HelperRegistrationRecord, String> EINSATZ_MONTAG = createField(DSL.name("einsatz_montag"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>helper_registration.einsatz_dienstag</code>.
     */
    public final TableField<HelperRegistrationRecord, String> EINSATZ_DIENSTAG = createField(DSL.name("einsatz_dienstag"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>helper_registration.groesse_shirt</code>.
     */
    public final TableField<HelperRegistrationRecord, String> GROESSE_SHIRT = createField(DSL.name("groesse_shirt"), SQLDataType.VARCHAR(24).nullable(false), this, "");

    /**
     * The column <code>helper_registration.registered_at</code>.
     */
    public final TableField<HelperRegistrationRecord, LocalDateTime> REGISTERED_AT = createField(DSL.name("registered_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private HelperRegistration(Name alias, Table<HelperRegistrationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private HelperRegistration(Name alias, Table<HelperRegistrationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>helper_registration</code> table reference
     */
    public HelperRegistration(String alias) {
        this(DSL.name(alias), HELPER_REGISTRATION);
    }

    /**
     * Create an aliased <code>helper_registration</code> table reference
     */
    public HelperRegistration(Name alias) {
        this(alias, HELPER_REGISTRATION);
    }

    /**
     * Create a <code>helper_registration</code> table reference
     */
    public HelperRegistration() {
        this(DSL.name("helper_registration"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<HelperRegistrationRecord, Long> getIdentity() {
        return (Identity<HelperRegistrationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<HelperRegistrationRecord> getPrimaryKey() {
        return Keys.PK_HELPER_REGISTRATION;
    }

    @Override
    public List<UniqueKey<HelperRegistrationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.HELPER_REGISTRATION_EMAIL_KEY);
    }

    @Override
    public HelperRegistration as(String alias) {
        return new HelperRegistration(DSL.name(alias), this);
    }

    @Override
    public HelperRegistration as(Name alias) {
        return new HelperRegistration(alias, this);
    }

    @Override
    public HelperRegistration as(Table<?> alias) {
        return new HelperRegistration(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HelperRegistration rename(String name) {
        return new HelperRegistration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HelperRegistration rename(Name name) {
        return new HelperRegistration(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HelperRegistration rename(Table<?> name) {
        return new HelperRegistration(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HelperRegistration where(Condition condition) {
        return new HelperRegistration(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HelperRegistration where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HelperRegistration where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HelperRegistration where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HelperRegistration where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HelperRegistration where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HelperRegistration where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HelperRegistration where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HelperRegistration whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HelperRegistration whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
