/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.records.NotificationSentRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Collection;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class NotificationSent extends TableImpl<NotificationSentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>notification_sent</code>
     */
    public static final NotificationSent NOTIFICATION_SENT = new NotificationSent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationSentRecord> getRecordType() {
        return NotificationSentRecord.class;
    }

    /**
     * The column <code>notification_sent.id</code>.
     */
    public final TableField<NotificationSentRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>notification_sent.sent_at</code>.
     */
    public final TableField<NotificationSentRecord, LocalDateTime> SENT_AT = createField(DSL.name("sent_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private NotificationSent(Name alias, Table<NotificationSentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotificationSent(Name alias, Table<NotificationSentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>notification_sent</code> table reference
     */
    public NotificationSent(String alias) {
        this(DSL.name(alias), NOTIFICATION_SENT);
    }

    /**
     * Create an aliased <code>notification_sent</code> table reference
     */
    public NotificationSent(Name alias) {
        this(alias, NOTIFICATION_SENT);
    }

    /**
     * Create a <code>notification_sent</code> table reference
     */
    public NotificationSent() {
        this(DSL.name("notification_sent"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<NotificationSentRecord> getPrimaryKey() {
        return Keys.PK_NOTIFICATION_SENT;
    }

    @Override
    public NotificationSent as(String alias) {
        return new NotificationSent(DSL.name(alias), this);
    }

    @Override
    public NotificationSent as(Name alias) {
        return new NotificationSent(alias, this);
    }

    @Override
    public NotificationSent as(Table<?> alias) {
        return new NotificationSent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationSent rename(String name) {
        return new NotificationSent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationSent rename(Name name) {
        return new NotificationSent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationSent rename(Table<?> name) {
        return new NotificationSent(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationSent where(Condition condition) {
        return new NotificationSent(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationSent where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationSent where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationSent where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationSent where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationSent where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationSent where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationSent where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationSent whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationSent whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
