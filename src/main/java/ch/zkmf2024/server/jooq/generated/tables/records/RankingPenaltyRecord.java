/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables.records;

import ch.zkmf2024.server.jooq.generated.tables.RankingPenalty;
import ch.zkmf2024.server.jooq.generated.tables.interfaces.IRankingPenalty;
import ch.zkmf2024.server.jooq.generated.tables.pojos.RankingPenaltyPojo;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class RankingPenaltyRecord extends UpdatableRecordImpl<RankingPenaltyRecord> implements Record3<Long, Long, Integer>, IRankingPenalty {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ranking_penalty.id</code>.
     */
    @Override
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>ranking_penalty.id</code>.
     */
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>ranking_penalty.fk_timetable_entry</code>.
     */
    @Override
    public void setFkTimetableEntry(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>ranking_penalty.fk_timetable_entry</code>.
     */
    @Override
    public Long getFkTimetableEntry() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>ranking_penalty.minutes_overrun</code>.
     */
    @Override
    public void setMinutesOverrun(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>ranking_penalty.minutes_overrun</code>.
     */
    @Override
    public Integer getMinutesOverrun() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return RankingPenalty.RANKING_PENALTY.ID;
    }

    @Override
    public Field<Long> field2() {
        return RankingPenalty.RANKING_PENALTY.FK_TIMETABLE_ENTRY;
    }

    @Override
    public Field<Integer> field3() {
        return RankingPenalty.RANKING_PENALTY.MINUTES_OVERRUN;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getFkTimetableEntry();
    }

    @Override
    public Integer component3() {
        return getMinutesOverrun();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getFkTimetableEntry();
    }

    @Override
    public Integer value3() {
        return getMinutesOverrun();
    }

    @Override
    public RankingPenaltyRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public RankingPenaltyRecord value2(Long value) {
        setFkTimetableEntry(value);
        return this;
    }

    @Override
    public RankingPenaltyRecord value3(Integer value) {
        setMinutesOverrun(value);
        return this;
    }

    @Override
    public RankingPenaltyRecord values(Long value1, Long value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IRankingPenalty from) {
        setId(from.getId());
        setFkTimetableEntry(from.getFkTimetableEntry());
        setMinutesOverrun(from.getMinutesOverrun());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IRankingPenalty> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RankingPenaltyRecord
     */
    public RankingPenaltyRecord() {
        super(RankingPenalty.RANKING_PENALTY);
    }

    /**
     * Create a detached, initialised RankingPenaltyRecord
     */
    public RankingPenaltyRecord(Long id, Long fkTimetableEntry, Integer minutesOverrun) {
        super(RankingPenalty.RANKING_PENALTY);

        setId(id);
        setFkTimetableEntry(fkTimetableEntry);
        setMinutesOverrun(minutesOverrun);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised RankingPenaltyRecord
     */
    public RankingPenaltyRecord(RankingPenaltyPojo value) {
        super(RankingPenalty.RANKING_PENALTY);

        if (value != null) {
            setId(value.getId());
            setFkTimetableEntry(value.getFkTimetableEntry());
            setMinutesOverrun(value.getMinutesOverrun());
            resetChangedOnNotNull();
        }
    }
}
