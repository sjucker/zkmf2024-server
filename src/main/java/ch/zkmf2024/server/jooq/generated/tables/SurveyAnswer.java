/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.records.SurveyAnswerRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function15;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.OffsetDateTime;
import java.util.function.Function;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class SurveyAnswer extends TableImpl<SurveyAnswerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>survey_answer</code>
     */
    public static final SurveyAnswer SURVEY_ANSWER = new SurveyAnswer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SurveyAnswerRecord> getRecordType() {
        return SurveyAnswerRecord.class;
    }

    /**
     * The column <code>survey_answer.id</code>.
     */
    public final TableField<SurveyAnswerRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>survey_answer.timestamp</code>.
     */
    public final TableField<SurveyAnswerRecord, OffsetDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>survey_answer.vereins_name</code>.
     */
    public final TableField<SurveyAnswerRecord, String> VEREINS_NAME = createField(DSL.name("vereins_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>survey_answer.besetzung</code>.
     */
    public final TableField<SurveyAnswerRecord, String> BESETZUNG = createField(DSL.name("besetzung"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>survey_answer.staerke_klasse</code>.
     */
    public final TableField<SurveyAnswerRecord, String> STAERKE_KLASSE = createField(DSL.name("staerke_klasse"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>survey_answer.anzahl_mitglieder</code>.
     */
    public final TableField<SurveyAnswerRecord, String> ANZAHL_MITGLIEDER = createField(DSL.name("anzahl_mitglieder"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>survey_answer.kontakt_name</code>.
     */
    public final TableField<SurveyAnswerRecord, String> KONTAKT_NAME = createField(DSL.name("kontakt_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>survey_answer.kontakt_email</code>.
     */
    public final TableField<SurveyAnswerRecord, String> KONTAKT_EMAIL = createField(DSL.name("kontakt_email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>survey_answer.kontakt_telefon</code>.
     */
    public final TableField<SurveyAnswerRecord, String> KONTAKT_TELEFON = createField(DSL.name("kontakt_telefon"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>survey_answer.modul_auswahl</code>.
     */
    public final TableField<SurveyAnswerRecord, String> MODUL_AUSWAHL = createField(DSL.name("modul_auswahl"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>survey_answer.zusage_kommentar</code>.
     */
    public final TableField<SurveyAnswerRecord, String> ZUSAGE_KOMMENTAR = createField(DSL.name("zusage_kommentar"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>survey_answer.absage</code>.
     */
    public final TableField<SurveyAnswerRecord, Boolean> ABSAGE = createField(DSL.name("absage"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>survey_answer.absage_kommentar</code>.
     */
    public final TableField<SurveyAnswerRecord, String> ABSAGE_KOMMENTAR = createField(DSL.name("absage_kommentar"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>survey_answer.absage_kontaktaufnahme</code>.
     */
    public final TableField<SurveyAnswerRecord, String> ABSAGE_KONTAKTAUFNAHME = createField(DSL.name("absage_kontaktaufnahme"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>survey_answer.helfer</code>.
     */
    public final TableField<SurveyAnswerRecord, String> HELFER = createField(DSL.name("helfer"), SQLDataType.VARCHAR(255), this, "");

    private SurveyAnswer(Name alias, Table<SurveyAnswerRecord> aliased) {
        this(alias, aliased, null);
    }

    private SurveyAnswer(Name alias, Table<SurveyAnswerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>survey_answer</code> table reference
     */
    public SurveyAnswer(String alias) {
        this(DSL.name(alias), SURVEY_ANSWER);
    }

    /**
     * Create an aliased <code>survey_answer</code> table reference
     */
    public SurveyAnswer(Name alias) {
        this(alias, SURVEY_ANSWER);
    }

    /**
     * Create a <code>survey_answer</code> table reference
     */
    public SurveyAnswer() {
        this(DSL.name("survey_answer"), null);
    }

    public <O extends Record> SurveyAnswer(Table<O> child, ForeignKey<O, SurveyAnswerRecord> key) {
        super(child, key, SURVEY_ANSWER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<SurveyAnswerRecord, Long> getIdentity() {
        return (Identity<SurveyAnswerRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SurveyAnswerRecord> getPrimaryKey() {
        return Keys.PK_SURVEY_ANSWER;
    }

    @Override
    public SurveyAnswer as(String alias) {
        return new SurveyAnswer(DSL.name(alias), this);
    }

    @Override
    public SurveyAnswer as(Name alias) {
        return new SurveyAnswer(alias, this);
    }

    @Override
    public SurveyAnswer as(Table<?> alias) {
        return new SurveyAnswer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SurveyAnswer rename(String name) {
        return new SurveyAnswer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SurveyAnswer rename(Name name) {
        return new SurveyAnswer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SurveyAnswer rename(Table<?> name) {
        return new SurveyAnswer(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Long, OffsetDateTime, String, String, String, String, String, String, String, String, String, Boolean, String, String, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function15<? super Long, ? super OffsetDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function15<? super Long, ? super OffsetDateTime, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
