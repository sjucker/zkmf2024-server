/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables.records;

import ch.zkmf2024.server.jooq.generated.tables.Image;
import ch.zkmf2024.server.jooq.generated.tables.interfaces.IImage;
import ch.zkmf2024.server.jooq.generated.tables.pojos.ImagePojo;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.OffsetDateTime;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ImageRecord extends UpdatableRecordImpl<ImageRecord> implements Record6<Long, Long, byte[], String, OffsetDateTime, String>, IImage {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>image.id</code>.
     */
    @Override
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>image.id</code>.
     */
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>image.foreign_key</code>.
     */
    @Override
    public void setForeignKey(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>image.foreign_key</code>.
     */
    @Override
    public Long getForeignKey() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>image.content</code>.
     */
    @Override
    public void setContent(byte[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>image.content</code>.
     */
    @Override
    public byte[] getContent() {
        return (byte[]) get(2);
    }

    /**
     * Setter for <code>image.name</code>.
     */
    @Override
    public void setName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>image.name</code>.
     */
    @Override
    public String getName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>image.uploaded_at</code>.
     */
    @Override
    public void setUploadedAt(OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>image.uploaded_at</code>.
     */
    @Override
    public OffsetDateTime getUploadedAt() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>image.type</code>.
     */
    @Override
    public void setType(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>image.type</code>.
     */
    @Override
    public String getType() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, byte[], String, OffsetDateTime, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Long, Long, byte[], String, OffsetDateTime, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Image.IMAGE.ID;
    }

    @Override
    public Field<Long> field2() {
        return Image.IMAGE.FOREIGN_KEY;
    }

    @Override
    public Field<byte[]> field3() {
        return Image.IMAGE.CONTENT;
    }

    @Override
    public Field<String> field4() {
        return Image.IMAGE.NAME;
    }

    @Override
    public Field<OffsetDateTime> field5() {
        return Image.IMAGE.UPLOADED_AT;
    }

    @Override
    public Field<String> field6() {
        return Image.IMAGE.TYPE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getForeignKey();
    }

    @Override
    public byte[] component3() {
        return getContent();
    }

    @Override
    public String component4() {
        return getName();
    }

    @Override
    public OffsetDateTime component5() {
        return getUploadedAt();
    }

    @Override
    public String component6() {
        return getType();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getForeignKey();
    }

    @Override
    public byte[] value3() {
        return getContent();
    }

    @Override
    public String value4() {
        return getName();
    }

    @Override
    public OffsetDateTime value5() {
        return getUploadedAt();
    }

    @Override
    public String value6() {
        return getType();
    }

    @Override
    public ImageRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ImageRecord value2(Long value) {
        setForeignKey(value);
        return this;
    }

    @Override
    public ImageRecord value3(byte[] value) {
        setContent(value);
        return this;
    }

    @Override
    public ImageRecord value4(String value) {
        setName(value);
        return this;
    }

    @Override
    public ImageRecord value5(OffsetDateTime value) {
        setUploadedAt(value);
        return this;
    }

    @Override
    public ImageRecord value6(String value) {
        setType(value);
        return this;
    }

    @Override
    public ImageRecord values(Long value1, Long value2, byte[] value3, String value4, OffsetDateTime value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IImage from) {
        setId(from.getId());
        setForeignKey(from.getForeignKey());
        setContent(from.getContent());
        setName(from.getName());
        setUploadedAt(from.getUploadedAt());
        setType(from.getType());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IImage> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ImageRecord
     */
    public ImageRecord() {
        super(Image.IMAGE);
    }

    /**
     * Create a detached, initialised ImageRecord
     */
    public ImageRecord(Long id, Long foreignKey, byte[] content, String name, OffsetDateTime uploadedAt, String type) {
        super(Image.IMAGE);

        setId(id);
        setForeignKey(foreignKey);
        setContent(content);
        setName(name);
        setUploadedAt(uploadedAt);
        setType(type);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ImageRecord
     */
    public ImageRecord(ImagePojo value) {
        super(Image.IMAGE);

        if (value != null) {
            setId(value.getId());
            setForeignKey(value.getForeignKey());
            setContent(value.getContent());
            setName(value.getName());
            setUploadedAt(value.getUploadedAt());
            setType(value.getType());
            resetChangedOnNotNull();
        }
    }
}
