/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables.records;

import ch.zkmf2024.server.jooq.generated.tables.Image;
import ch.zkmf2024.server.jooq.generated.tables.interfaces.IImage;
import ch.zkmf2024.server.jooq.generated.tables.pojos.ImagePojo;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.LocalDateTime;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class ImageRecord extends UpdatableRecordImpl<ImageRecord> implements IImage {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>image.id</code>.
     */
    @Override
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>image.id</code>.
     */
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>image.foreign_key</code>.
     */
    @Override
    public void setForeignKey(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>image.foreign_key</code>.
     */
    @Override
    public Long getForeignKey() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>image.content</code>.
     */
    @Override
    public void setContent(byte[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>image.content</code>.
     */
    @Override
    public byte[] getContent() {
        return (byte[]) get(2);
    }

    /**
     * Setter for <code>image.name</code>.
     */
    @Override
    public void setName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>image.name</code>.
     */
    @Override
    public String getName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>image.uploaded_at</code>.
     */
    @Override
    public void setUploadedAt(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>image.uploaded_at</code>.
     */
    @Override
    public LocalDateTime getUploadedAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>image.type</code>.
     */
    @Override
    public void setType(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>image.type</code>.
     */
    @Override
    public String getType() {
        return (String) get(5);
    }

    /**
     * Setter for <code>image.cloudflare_id</code>.
     */
    @Override
    public void setCloudflareId(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>image.cloudflare_id</code>.
     */
    @Override
    public String getCloudflareId() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IImage from) {
        setId(from.getId());
        setForeignKey(from.getForeignKey());
        setContent(from.getContent());
        setName(from.getName());
        setUploadedAt(from.getUploadedAt());
        setType(from.getType());
        setCloudflareId(from.getCloudflareId());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IImage> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ImageRecord
     */
    public ImageRecord() {
        super(Image.IMAGE);
    }

    /**
     * Create a detached, initialised ImageRecord
     */
    public ImageRecord(Long id, Long foreignKey, byte[] content, String name, LocalDateTime uploadedAt, String type, String cloudflareId) {
        super(Image.IMAGE);

        setId(id);
        setForeignKey(foreignKey);
        setContent(content);
        setName(name);
        setUploadedAt(uploadedAt);
        setType(type);
        setCloudflareId(cloudflareId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ImageRecord
     */
    public ImageRecord(ImagePojo value) {
        super(Image.IMAGE);

        if (value != null) {
            setId(value.getId());
            setForeignKey(value.getForeignKey());
            setContent(value.getContent());
            setName(value.getName());
            setUploadedAt(value.getUploadedAt());
            setType(value.getType());
            setCloudflareId(value.getCloudflareId());
            resetChangedOnNotNull();
        }
    }
}
