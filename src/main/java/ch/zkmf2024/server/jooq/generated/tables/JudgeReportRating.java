/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Indexes;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.records.JudgeReportRatingRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class JudgeReportRating extends TableImpl<JudgeReportRatingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>judge_report_rating</code>
     */
    public static final JudgeReportRating JUDGE_REPORT_RATING = new JudgeReportRating();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JudgeReportRatingRecord> getRecordType() {
        return JudgeReportRatingRecord.class;
    }

    /**
     * The column <code>judge_report_rating.id</code>.
     */
    public final TableField<JudgeReportRatingRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>judge_report_rating.fk_judge_report</code>.
     */
    public final TableField<JudgeReportRatingRecord, Long> FK_JUDGE_REPORT = createField(DSL.name("fk_judge_report"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>judge_report_rating.fk_titel</code>.
     */
    public final TableField<JudgeReportRatingRecord, Long> FK_TITEL = createField(DSL.name("fk_titel"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>judge_report_rating.category</code>.
     */
    public final TableField<JudgeReportRatingRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>judge_report_rating.rating</code>.
     */
    public final TableField<JudgeReportRatingRecord, String> RATING = createField(DSL.name("rating"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>judge_report_rating.comment</code>.
     */
    public final TableField<JudgeReportRatingRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.VARCHAR(1024), this, "");

    private JudgeReportRating(Name alias, Table<JudgeReportRatingRecord> aliased) {
        this(alias, aliased, null);
    }

    private JudgeReportRating(Name alias, Table<JudgeReportRatingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>judge_report_rating</code> table reference
     */
    public JudgeReportRating(String alias) {
        this(DSL.name(alias), JUDGE_REPORT_RATING);
    }

    /**
     * Create an aliased <code>judge_report_rating</code> table reference
     */
    public JudgeReportRating(Name alias) {
        this(alias, JUDGE_REPORT_RATING);
    }

    /**
     * Create a <code>judge_report_rating</code> table reference
     */
    public JudgeReportRating() {
        this(DSL.name("judge_report_rating"), null);
    }

    public <O extends Record> JudgeReportRating(Table<O> child, ForeignKey<O, JudgeReportRatingRecord> key) {
        super(child, key, JUDGE_REPORT_RATING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FK_JUDGE_REPORT_RATING_TITEL);
    }

    @Override
    public Identity<JudgeReportRatingRecord, Long> getIdentity() {
        return (Identity<JudgeReportRatingRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JudgeReportRatingRecord> getPrimaryKey() {
        return Keys.PK_JUDGE_REPORT_RATING;
    }

    @Override
    public List<UniqueKey<JudgeReportRatingRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.JUDGE_REPORT_RATING_FK_JUDGE_REPORT_FK_TITEL_CATEGORY_KEY);
    }

    @Override
    public List<ForeignKey<JudgeReportRatingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.JUDGE_REPORT_RATING__FK_JUDGE_REPORT_RATING_REPORT, Keys.JUDGE_REPORT_RATING__FK_JUDGE_REPORT_RATING_TITEL);
    }

    private transient JudgeReport _judgeReport;
    private transient Titel _titel;

    /**
     * Get the implicit join path to the <code>public.judge_report</code> table.
     */
    public JudgeReport judgeReport() {
        if (_judgeReport == null)
            _judgeReport = new JudgeReport(this, Keys.JUDGE_REPORT_RATING__FK_JUDGE_REPORT_RATING_REPORT);

        return _judgeReport;
    }

    /**
     * Get the implicit join path to the <code>public.titel</code> table.
     */
    public Titel titel() {
        if (_titel == null)
            _titel = new Titel(this, Keys.JUDGE_REPORT_RATING__FK_JUDGE_REPORT_RATING_TITEL);

        return _titel;
    }

    @Override
    public JudgeReportRating as(String alias) {
        return new JudgeReportRating(DSL.name(alias), this);
    }

    @Override
    public JudgeReportRating as(Name alias) {
        return new JudgeReportRating(alias, this);
    }

    @Override
    public JudgeReportRating as(Table<?> alias) {
        return new JudgeReportRating(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JudgeReportRating rename(String name) {
        return new JudgeReportRating(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JudgeReportRating rename(Name name) {
        return new JudgeReportRating(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JudgeReportRating rename(Table<?> name) {
        return new JudgeReportRating(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Long, ? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Long, ? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
