/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Indexes;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.JudgeReport.JudgeReportPath;
import ch.zkmf2024.server.jooq.generated.tables.Titel.TitelPath;
import ch.zkmf2024.server.jooq.generated.tables.records.JudgeReportRatingRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class JudgeReportRating extends TableImpl<JudgeReportRatingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>judge_report_rating</code>
     */
    public static final JudgeReportRating JUDGE_REPORT_RATING = new JudgeReportRating();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JudgeReportRatingRecord> getRecordType() {
        return JudgeReportRatingRecord.class;
    }

    /**
     * The column <code>judge_report_rating.id</code>.
     */
    public final TableField<JudgeReportRatingRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>judge_report_rating.fk_judge_report</code>.
     */
    public final TableField<JudgeReportRatingRecord, Long> FK_JUDGE_REPORT = createField(DSL.name("fk_judge_report"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>judge_report_rating.fk_titel</code>.
     */
    public final TableField<JudgeReportRatingRecord, Long> FK_TITEL = createField(DSL.name("fk_titel"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>judge_report_rating.category</code>.
     */
    public final TableField<JudgeReportRatingRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>judge_report_rating.rating</code>.
     */
    public final TableField<JudgeReportRatingRecord, String> RATING = createField(DSL.name("rating"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>judge_report_rating.comment</code>.
     */
    public final TableField<JudgeReportRatingRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>judge_report_rating.score</code>.
     */
    public final TableField<JudgeReportRatingRecord, BigDecimal> SCORE = createField(DSL.name("score"), SQLDataType.NUMERIC(3, 1), this, "");

    private JudgeReportRating(Name alias, Table<JudgeReportRatingRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JudgeReportRating(Name alias, Table<JudgeReportRatingRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>judge_report_rating</code> table reference
     */
    public JudgeReportRating(String alias) {
        this(DSL.name(alias), JUDGE_REPORT_RATING);
    }

    /**
     * Create an aliased <code>judge_report_rating</code> table reference
     */
    public JudgeReportRating(Name alias) {
        this(alias, JUDGE_REPORT_RATING);
    }

    /**
     * Create a <code>judge_report_rating</code> table reference
     */
    public JudgeReportRating() {
        this(DSL.name("judge_report_rating"), null);
    }

    public <O extends Record> JudgeReportRating(Table<O> path, ForeignKey<O, JudgeReportRatingRecord> childPath, InverseForeignKey<O, JudgeReportRatingRecord> parentPath) {
        super(path, childPath, parentPath, JUDGE_REPORT_RATING);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JudgeReportRatingPath extends JudgeReportRating implements Path<JudgeReportRatingRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> JudgeReportRatingPath(Table<O> path, ForeignKey<O, JudgeReportRatingRecord> childPath, InverseForeignKey<O, JudgeReportRatingRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private JudgeReportRatingPath(Name alias, Table<JudgeReportRatingRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JudgeReportRatingPath as(String alias) {
            return new JudgeReportRatingPath(DSL.name(alias), this);
        }

        @Override
        public JudgeReportRatingPath as(Name alias) {
            return new JudgeReportRatingPath(alias, this);
        }

        @Override
        public JudgeReportRatingPath as(Table<?> alias) {
            return new JudgeReportRatingPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FK_JUDGE_REPORT_RATING_TITEL);
    }

    @Override
    public Identity<JudgeReportRatingRecord, Long> getIdentity() {
        return (Identity<JudgeReportRatingRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JudgeReportRatingRecord> getPrimaryKey() {
        return Keys.PK_JUDGE_REPORT_RATING;
    }

    @Override
    public List<UniqueKey<JudgeReportRatingRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.JUDGE_REPORT_RATING_FK_JUDGE_REPORT_FK_TITEL_CATEGORY_KEY);
    }

    @Override
    public List<ForeignKey<JudgeReportRatingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.JUDGE_REPORT_RATING__FK_JUDGE_REPORT_RATING_REPORT, Keys.JUDGE_REPORT_RATING__FK_JUDGE_REPORT_RATING_TITEL);
    }

    private transient JudgeReportPath _judgeReport;

    /**
     * Get the implicit join path to the <code>public.judge_report</code> table.
     */
    public JudgeReportPath judgeReport() {
        if (_judgeReport == null)
            _judgeReport = new JudgeReportPath(this, Keys.JUDGE_REPORT_RATING__FK_JUDGE_REPORT_RATING_REPORT, null);

        return _judgeReport;
    }

    private transient TitelPath _titel;

    /**
     * Get the implicit join path to the <code>public.titel</code> table.
     */
    public TitelPath titel() {
        if (_titel == null)
            _titel = new TitelPath(this, Keys.JUDGE_REPORT_RATING__FK_JUDGE_REPORT_RATING_TITEL, null);

        return _titel;
    }

    @Override
    public JudgeReportRating as(String alias) {
        return new JudgeReportRating(DSL.name(alias), this);
    }

    @Override
    public JudgeReportRating as(Name alias) {
        return new JudgeReportRating(alias, this);
    }

    @Override
    public JudgeReportRating as(Table<?> alias) {
        return new JudgeReportRating(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JudgeReportRating rename(String name) {
        return new JudgeReportRating(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JudgeReportRating rename(Name name) {
        return new JudgeReportRating(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JudgeReportRating rename(Table<?> name) {
        return new JudgeReportRating(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JudgeReportRating where(Condition condition) {
        return new JudgeReportRating(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JudgeReportRating where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JudgeReportRating where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JudgeReportRating where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JudgeReportRating where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JudgeReportRating where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JudgeReportRating where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JudgeReportRating where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JudgeReportRating whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JudgeReportRating whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
