/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.records.ProgrammVorgabenRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Collection;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class ProgrammVorgaben extends TableImpl<ProgrammVorgabenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>programm_vorgaben</code>
     */
    public static final ProgrammVorgaben PROGRAMM_VORGABEN = new ProgrammVorgaben();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProgrammVorgabenRecord> getRecordType() {
        return ProgrammVorgabenRecord.class;
    }

    /**
     * The column <code>programm_vorgaben.modul</code>.
     */
    public final TableField<ProgrammVorgabenRecord, String> MODUL = createField(DSL.name("modul"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>programm_vorgaben.klasse</code>.
     */
    public final TableField<ProgrammVorgabenRecord, String> KLASSE = createField(DSL.name("klasse"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>programm_vorgaben.besetzung</code>.
     */
    public final TableField<ProgrammVorgabenRecord, String> BESETZUNG = createField(DSL.name("besetzung"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>programm_vorgaben.min_duration_in_seconds</code>.
     */
    public final TableField<ProgrammVorgabenRecord, Integer> MIN_DURATION_IN_SECONDS = createField(DSL.name("min_duration_in_seconds"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>programm_vorgaben.max_duration_in_seconds</code>.
     */
    public final TableField<ProgrammVorgabenRecord, Integer> MAX_DURATION_IN_SECONDS = createField(DSL.name("max_duration_in_seconds"), SQLDataType.INTEGER.nullable(false), this, "");

    private ProgrammVorgaben(Name alias, Table<ProgrammVorgabenRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProgrammVorgaben(Name alias, Table<ProgrammVorgabenRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>programm_vorgaben</code> table reference
     */
    public ProgrammVorgaben(String alias) {
        this(DSL.name(alias), PROGRAMM_VORGABEN);
    }

    /**
     * Create an aliased <code>programm_vorgaben</code> table reference
     */
    public ProgrammVorgaben(Name alias) {
        this(alias, PROGRAMM_VORGABEN);
    }

    /**
     * Create a <code>programm_vorgaben</code> table reference
     */
    public ProgrammVorgaben() {
        this(DSL.name("programm_vorgaben"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ProgrammVorgabenRecord> getPrimaryKey() {
        return Keys.PK_PROGRAMM_VORGABEN;
    }

    @Override
    public ProgrammVorgaben as(String alias) {
        return new ProgrammVorgaben(DSL.name(alias), this);
    }

    @Override
    public ProgrammVorgaben as(Name alias) {
        return new ProgrammVorgaben(alias, this);
    }

    @Override
    public ProgrammVorgaben as(Table<?> alias) {
        return new ProgrammVorgaben(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProgrammVorgaben rename(String name) {
        return new ProgrammVorgaben(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProgrammVorgaben rename(Name name) {
        return new ProgrammVorgaben(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProgrammVorgaben rename(Table<?> name) {
        return new ProgrammVorgaben(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProgrammVorgaben where(Condition condition) {
        return new ProgrammVorgaben(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProgrammVorgaben where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProgrammVorgaben where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProgrammVorgaben where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProgrammVorgaben where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProgrammVorgaben where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProgrammVorgaben where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProgrammVorgaben where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProgrammVorgaben whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProgrammVorgaben whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
