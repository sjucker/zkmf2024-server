/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.records.ProgrammVorgabenRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ProgrammVorgaben extends TableImpl<ProgrammVorgabenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>programm_vorgaben</code>
     */
    public static final ProgrammVorgaben PROGRAMM_VORGABEN = new ProgrammVorgaben();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProgrammVorgabenRecord> getRecordType() {
        return ProgrammVorgabenRecord.class;
    }

    /**
     * The column <code>programm_vorgaben.modul</code>.
     */
    public final TableField<ProgrammVorgabenRecord, String> MODUL = createField(DSL.name("modul"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>programm_vorgaben.klasse</code>.
     */
    public final TableField<ProgrammVorgabenRecord, String> KLASSE = createField(DSL.name("klasse"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>programm_vorgaben.besetzung</code>.
     */
    public final TableField<ProgrammVorgabenRecord, String> BESETZUNG = createField(DSL.name("besetzung"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>programm_vorgaben.min_duration_in_seconds</code>.
     */
    public final TableField<ProgrammVorgabenRecord, Integer> MIN_DURATION_IN_SECONDS = createField(DSL.name("min_duration_in_seconds"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>programm_vorgaben.max_duration_in_seconds</code>.
     */
    public final TableField<ProgrammVorgabenRecord, Integer> MAX_DURATION_IN_SECONDS = createField(DSL.name("max_duration_in_seconds"), SQLDataType.INTEGER.nullable(false), this, "");

    private ProgrammVorgaben(Name alias, Table<ProgrammVorgabenRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProgrammVorgaben(Name alias, Table<ProgrammVorgabenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>programm_vorgaben</code> table reference
     */
    public ProgrammVorgaben(String alias) {
        this(DSL.name(alias), PROGRAMM_VORGABEN);
    }

    /**
     * Create an aliased <code>programm_vorgaben</code> table reference
     */
    public ProgrammVorgaben(Name alias) {
        this(alias, PROGRAMM_VORGABEN);
    }

    /**
     * Create a <code>programm_vorgaben</code> table reference
     */
    public ProgrammVorgaben() {
        this(DSL.name("programm_vorgaben"), null);
    }

    public <O extends Record> ProgrammVorgaben(Table<O> child, ForeignKey<O, ProgrammVorgabenRecord> key) {
        super(child, key, PROGRAMM_VORGABEN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ProgrammVorgabenRecord> getPrimaryKey() {
        return Keys.KEY_PROGRAMM_VORGABEN_PRIMARY;
    }

    @Override
    public ProgrammVorgaben as(String alias) {
        return new ProgrammVorgaben(DSL.name(alias), this);
    }

    @Override
    public ProgrammVorgaben as(Name alias) {
        return new ProgrammVorgaben(alias, this);
    }

    @Override
    public ProgrammVorgaben as(Table<?> alias) {
        return new ProgrammVorgaben(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProgrammVorgaben rename(String name) {
        return new ProgrammVorgaben(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProgrammVorgaben rename(Name name) {
        return new ProgrammVorgaben(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProgrammVorgaben rename(Table<?> name) {
        return new ProgrammVorgaben(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
