/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.records.ErrataRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Errata extends TableImpl<ErrataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>errata</code>
     */
    public static final Errata ERRATA = new Errata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ErrataRecord> getRecordType() {
        return ErrataRecord.class;
    }

    /**
     * The column <code>errata.id</code>.
     */
    public final TableField<ErrataRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>errata.modul</code>.
     */
    public final TableField<ErrataRecord, String> MODUL = createField(DSL.name("modul"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>errata.klasse</code>.
     */
    public final TableField<ErrataRecord, String> KLASSE = createField(DSL.name("klasse"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>errata.besetzung</code>.
     */
    public final TableField<ErrataRecord, String> BESETZUNG = createField(DSL.name("besetzung"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>errata.text</code>.
     */
    public final TableField<ErrataRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB, this, "");

    private Errata(Name alias, Table<ErrataRecord> aliased) {
        this(alias, aliased, null);
    }

    private Errata(Name alias, Table<ErrataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>errata</code> table reference
     */
    public Errata(String alias) {
        this(DSL.name(alias), ERRATA);
    }

    /**
     * Create an aliased <code>errata</code> table reference
     */
    public Errata(Name alias) {
        this(alias, ERRATA);
    }

    /**
     * Create a <code>errata</code> table reference
     */
    public Errata() {
        this(DSL.name("errata"), null);
    }

    public <O extends Record> Errata(Table<O> child, ForeignKey<O, ErrataRecord> key) {
        super(child, key, ERRATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ErrataRecord, Long> getIdentity() {
        return (Identity<ErrataRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ErrataRecord> getPrimaryKey() {
        return Keys.PK_ERRATA;
    }

    @Override
    public List<UniqueKey<ErrataRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_ERRATA);
    }

    @Override
    public Errata as(String alias) {
        return new Errata(DSL.name(alias), this);
    }

    @Override
    public Errata as(Name alias) {
        return new Errata(alias, this);
    }

    @Override
    public Errata as(Table<?> alias) {
        return new Errata(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Errata rename(String name) {
        return new Errata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Errata rename(Name name) {
        return new Errata(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Errata rename(Table<?> name) {
        return new Errata(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
