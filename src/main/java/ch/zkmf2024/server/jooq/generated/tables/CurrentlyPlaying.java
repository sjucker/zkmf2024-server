/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.TimetableEntry.TimetableEntryPath;
import ch.zkmf2024.server.jooq.generated.tables.records.CurrentlyPlayingRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class CurrentlyPlaying extends TableImpl<CurrentlyPlayingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>currently_playing</code>
     */
    public static final CurrentlyPlaying CURRENTLY_PLAYING = new CurrentlyPlaying();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CurrentlyPlayingRecord> getRecordType() {
        return CurrentlyPlayingRecord.class;
    }

    /**
     * The column <code>currently_playing.id</code>.
     */
    public final TableField<CurrentlyPlayingRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>currently_playing.fk_timetable_entry</code>.
     */
    public final TableField<CurrentlyPlayingRecord, Long> FK_TIMETABLE_ENTRY = createField(DSL.name("fk_timetable_entry"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>currently_playing.started_at</code>.
     */
    public final TableField<CurrentlyPlayingRecord, LocalDateTime> STARTED_AT = createField(DSL.name("started_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>currently_playing.ended_at</code>.
     */
    public final TableField<CurrentlyPlayingRecord, LocalDateTime> ENDED_AT = createField(DSL.name("ended_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private CurrentlyPlaying(Name alias, Table<CurrentlyPlayingRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CurrentlyPlaying(Name alias, Table<CurrentlyPlayingRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>currently_playing</code> table reference
     */
    public CurrentlyPlaying(String alias) {
        this(DSL.name(alias), CURRENTLY_PLAYING);
    }

    /**
     * Create an aliased <code>currently_playing</code> table reference
     */
    public CurrentlyPlaying(Name alias) {
        this(alias, CURRENTLY_PLAYING);
    }

    /**
     * Create a <code>currently_playing</code> table reference
     */
    public CurrentlyPlaying() {
        this(DSL.name("currently_playing"), null);
    }

    public <O extends Record> CurrentlyPlaying(Table<O> path, ForeignKey<O, CurrentlyPlayingRecord> childPath, InverseForeignKey<O, CurrentlyPlayingRecord> parentPath) {
        super(path, childPath, parentPath, CURRENTLY_PLAYING);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CurrentlyPlayingPath extends CurrentlyPlaying implements Path<CurrentlyPlayingRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> CurrentlyPlayingPath(Table<O> path, ForeignKey<O, CurrentlyPlayingRecord> childPath, InverseForeignKey<O, CurrentlyPlayingRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private CurrentlyPlayingPath(Name alias, Table<CurrentlyPlayingRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CurrentlyPlayingPath as(String alias) {
            return new CurrentlyPlayingPath(DSL.name(alias), this);
        }

        @Override
        public CurrentlyPlayingPath as(Name alias) {
            return new CurrentlyPlayingPath(alias, this);
        }

        @Override
        public CurrentlyPlayingPath as(Table<?> alias) {
            return new CurrentlyPlayingPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<CurrentlyPlayingRecord, Long> getIdentity() {
        return (Identity<CurrentlyPlayingRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CurrentlyPlayingRecord> getPrimaryKey() {
        return Keys.PK_CURRENTLY_PLAYING;
    }

    @Override
    public List<ForeignKey<CurrentlyPlayingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CURRENTLY_PLAYING__FK_TIMETABLE_ENTRY);
    }

    private transient TimetableEntryPath _timetableEntry;

    /**
     * Get the implicit join path to the <code>public.timetable_entry</code>
     * table.
     */
    public TimetableEntryPath timetableEntry() {
        if (_timetableEntry == null)
            _timetableEntry = new TimetableEntryPath(this, Keys.CURRENTLY_PLAYING__FK_TIMETABLE_ENTRY, null);

        return _timetableEntry;
    }

    @Override
    public CurrentlyPlaying as(String alias) {
        return new CurrentlyPlaying(DSL.name(alias), this);
    }

    @Override
    public CurrentlyPlaying as(Name alias) {
        return new CurrentlyPlaying(alias, this);
    }

    @Override
    public CurrentlyPlaying as(Table<?> alias) {
        return new CurrentlyPlaying(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CurrentlyPlaying rename(String name) {
        return new CurrentlyPlaying(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CurrentlyPlaying rename(Name name) {
        return new CurrentlyPlaying(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CurrentlyPlaying rename(Table<?> name) {
        return new CurrentlyPlaying(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CurrentlyPlaying where(Condition condition) {
        return new CurrentlyPlaying(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CurrentlyPlaying where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CurrentlyPlaying where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CurrentlyPlaying where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CurrentlyPlaying where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CurrentlyPlaying where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CurrentlyPlaying where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CurrentlyPlaying where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CurrentlyPlaying whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CurrentlyPlaying whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
