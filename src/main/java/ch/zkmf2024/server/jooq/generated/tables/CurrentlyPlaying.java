/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.records.CurrentlyPlayingRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class CurrentlyPlaying extends TableImpl<CurrentlyPlayingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>currently_playing</code>
     */
    public static final CurrentlyPlaying CURRENTLY_PLAYING = new CurrentlyPlaying();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CurrentlyPlayingRecord> getRecordType() {
        return CurrentlyPlayingRecord.class;
    }

    /**
     * The column <code>currently_playing.id</code>.
     */
    public final TableField<CurrentlyPlayingRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>currently_playing.fk_timetable_entry</code>.
     */
    public final TableField<CurrentlyPlayingRecord, Long> FK_TIMETABLE_ENTRY = createField(DSL.name("fk_timetable_entry"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>currently_playing.started_at</code>.
     */
    public final TableField<CurrentlyPlayingRecord, LocalDateTime> STARTED_AT = createField(DSL.name("started_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>currently_playing.ended_at</code>.
     */
    public final TableField<CurrentlyPlayingRecord, LocalDateTime> ENDED_AT = createField(DSL.name("ended_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private CurrentlyPlaying(Name alias, Table<CurrentlyPlayingRecord> aliased) {
        this(alias, aliased, null);
    }

    private CurrentlyPlaying(Name alias, Table<CurrentlyPlayingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>currently_playing</code> table reference
     */
    public CurrentlyPlaying(String alias) {
        this(DSL.name(alias), CURRENTLY_PLAYING);
    }

    /**
     * Create an aliased <code>currently_playing</code> table reference
     */
    public CurrentlyPlaying(Name alias) {
        this(alias, CURRENTLY_PLAYING);
    }

    /**
     * Create a <code>currently_playing</code> table reference
     */
    public CurrentlyPlaying() {
        this(DSL.name("currently_playing"), null);
    }

    public <O extends Record> CurrentlyPlaying(Table<O> child, ForeignKey<O, CurrentlyPlayingRecord> key) {
        super(child, key, CURRENTLY_PLAYING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<CurrentlyPlayingRecord, Long> getIdentity() {
        return (Identity<CurrentlyPlayingRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CurrentlyPlayingRecord> getPrimaryKey() {
        return Keys.PK_CURRENTLY_PLAYING;
    }

    @Override
    public List<ForeignKey<CurrentlyPlayingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CURRENTLY_PLAYING__FK_TIMETABLE_ENTRY);
    }

    private transient TimetableEntry _timetableEntry;

    /**
     * Get the implicit join path to the <code>public.timetable_entry</code>
     * table.
     */
    public TimetableEntry timetableEntry() {
        if (_timetableEntry == null)
            _timetableEntry = new TimetableEntry(this, Keys.CURRENTLY_PLAYING__FK_TIMETABLE_ENTRY);

        return _timetableEntry;
    }

    @Override
    public CurrentlyPlaying as(String alias) {
        return new CurrentlyPlaying(DSL.name(alias), this);
    }

    @Override
    public CurrentlyPlaying as(Name alias) {
        return new CurrentlyPlaying(alias, this);
    }

    @Override
    public CurrentlyPlaying as(Table<?> alias) {
        return new CurrentlyPlaying(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CurrentlyPlaying rename(String name) {
        return new CurrentlyPlaying(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CurrentlyPlaying rename(Name name) {
        return new CurrentlyPlaying(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CurrentlyPlaying rename(Table<?> name) {
        return new CurrentlyPlaying(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
