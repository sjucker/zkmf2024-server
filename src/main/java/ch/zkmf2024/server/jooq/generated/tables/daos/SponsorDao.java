/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables.daos;

import ch.zkmf2024.server.jooq.generated.tables.Sponsor;
import ch.zkmf2024.server.jooq.generated.tables.pojos.SponsorPojo;
import ch.zkmf2024.server.jooq.generated.tables.records.SponsorRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import java.util.List;
import java.util.Optional;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class SponsorDao extends DAOImpl<SponsorRecord, SponsorPojo, Long> {

    /**
     * Create a new SponsorDao without any configuration
     */
    public SponsorDao() {
        super(Sponsor.SPONSOR, SponsorPojo.class);
    }

    /**
     * Create a new SponsorDao with an attached configuration
     */
    public SponsorDao(Configuration configuration) {
        super(Sponsor.SPONSOR, SponsorPojo.class, configuration);
    }

    @Override
    public Long getId(SponsorPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<SponsorPojo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Sponsor.SPONSOR.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<SponsorPojo> fetchById(Long... values) {
        return fetch(Sponsor.SPONSOR.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public SponsorPojo fetchOneById(Long value) {
        return fetchOne(Sponsor.SPONSOR.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<SponsorPojo> fetchOptionalById(Long value) {
        return fetchOptional(Sponsor.SPONSOR.ID, value);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<SponsorPojo> fetchRangeOfType(String lowerInclusive, String upperInclusive) {
        return fetchRange(Sponsor.SPONSOR.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<SponsorPojo> fetchByType(String... values) {
        return fetch(Sponsor.SPONSOR.TYPE, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<SponsorPojo> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Sponsor.SPONSOR.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<SponsorPojo> fetchByName(String... values) {
        return fetch(Sponsor.SPONSOR.NAME, values);
    }

    /**
     * Fetch records that have <code>cloudflare_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<SponsorPojo> fetchRangeOfCloudflareId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Sponsor.SPONSOR.CLOUDFLARE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cloudflare_id IN (values)</code>
     */
    public List<SponsorPojo> fetchByCloudflareId(String... values) {
        return fetch(Sponsor.SPONSOR.CLOUDFLARE_ID, values);
    }

    /**
     * Fetch records that have <code>url BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<SponsorPojo> fetchRangeOfUrl(String lowerInclusive, String upperInclusive) {
        return fetchRange(Sponsor.SPONSOR.URL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>url IN (values)</code>
     */
    public List<SponsorPojo> fetchByUrl(String... values) {
        return fetch(Sponsor.SPONSOR.URL, values);
    }
}
