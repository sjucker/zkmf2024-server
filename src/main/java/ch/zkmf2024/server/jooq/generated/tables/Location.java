/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Indexes;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.enums.LocationLocationType;
import ch.zkmf2024.server.jooq.generated.tables.TimetableEntry.TimetableEntryPath;
import ch.zkmf2024.server.jooq.generated.tables.UnterhaltungEntry.UnterhaltungEntryPath;
import ch.zkmf2024.server.jooq.generated.tables.records.LocationRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Location extends TableImpl<LocationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>location</code>
     */
    public static final Location LOCATION = new Location();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LocationRecord> getRecordType() {
        return LocationRecord.class;
    }

    /**
     * The column <code>location.id</code>.
     */
    public final TableField<LocationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>location.name</code>.
     */
    public final TableField<LocationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>location.address</code>.
     */
    public final TableField<LocationRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>location.latitude</code>.
     */
    public final TableField<LocationRecord, BigDecimal> LATITUDE = createField(DSL.name("latitude"), SQLDataType.NUMERIC(16, 12).nullable(false), this, "");

    /**
     * The column <code>location.longitude</code>.
     */
    public final TableField<LocationRecord, BigDecimal> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.NUMERIC(16, 12).nullable(false), this, "");

    /**
     * The column <code>location.location_type</code>.
     */
    public final TableField<LocationRecord, LocationLocationType> LOCATION_TYPE = createField(DSL.name("location_type"), SQLDataType.VARCHAR.asEnumDataType(LocationLocationType.class), this, "");

    /**
     * The column <code>location.capacity</code>.
     */
    public final TableField<LocationRecord, String> CAPACITY = createField(DSL.name("capacity"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>location.modules</code>.
     */
    public final TableField<LocationRecord, String> MODULES = createField(DSL.name("modules"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>location.einspiellokal_id</code>.
     */
    public final TableField<LocationRecord, Long> EINSPIELLOKAL_ID = createField(DSL.name("einspiellokal_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>location.instrumentendepot_id</code>.
     */
    public final TableField<LocationRecord, Long> INSTRUMENTENDEPOT_ID = createField(DSL.name("instrumentendepot_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>location.juryfeedback_id</code>.
     */
    public final TableField<LocationRecord, Long> JURYFEEDBACK_ID = createField(DSL.name("juryfeedback_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>location.sort_order</code>.
     */
    public final TableField<LocationRecord, Integer> SORT_ORDER = createField(DSL.name("sort_order"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>location.identifier</code>.
     */
    public final TableField<LocationRecord, String> IDENTIFIER = createField(DSL.name("identifier"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>location.cloudflare_id</code>.
     */
    public final TableField<LocationRecord, String> CLOUDFLARE_ID = createField(DSL.name("cloudflare_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>location.kuula_id</code>.
     */
    public final TableField<LocationRecord, String> KUULA_ID = createField(DSL.name("kuula_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>location.percussion_equipment</code>.
     */
    public final TableField<LocationRecord, String> PERCUSSION_EQUIPMENT = createField(DSL.name("percussion_equipment"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>location.map_id</code>.
     */
    public final TableField<LocationRecord, String> MAP_ID = createField(DSL.name("map_id"), SQLDataType.VARCHAR(5), this, "");

    /**
     * The column <code>location.instrumentendepot_parademusik_id</code>.
     */
    public final TableField<LocationRecord, Long> INSTRUMENTENDEPOT_PARADEMUSIK_ID = createField(DSL.name("instrumentendepot_parademusik_id"), SQLDataType.BIGINT, this, "");

    private Location(Name alias, Table<LocationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Location(Name alias, Table<LocationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>location</code> table reference
     */
    public Location(String alias) {
        this(DSL.name(alias), LOCATION);
    }

    /**
     * Create an aliased <code>location</code> table reference
     */
    public Location(Name alias) {
        this(alias, LOCATION);
    }

    /**
     * Create a <code>location</code> table reference
     */
    public Location() {
        this(DSL.name("location"), null);
    }

    public <O extends Record> Location(Table<O> path, ForeignKey<O, LocationRecord> childPath, InverseForeignKey<O, LocationRecord> parentPath) {
        super(path, childPath, parentPath, LOCATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LocationPath extends Location implements Path<LocationRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> LocationPath(Table<O> path, ForeignKey<O, LocationRecord> childPath, InverseForeignKey<O, LocationRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private LocationPath(Name alias, Table<LocationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LocationPath as(String alias) {
            return new LocationPath(DSL.name(alias), this);
        }

        @Override
        public LocationPath as(Name alias) {
            return new LocationPath(alias, this);
        }

        @Override
        public LocationPath as(Table<?> alias) {
            return new LocationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FK_LOCATION_EINSPIELLOKAL, Indexes.IDX_FK_LOCATION_INSTRUMENTENDEPOT, Indexes.IDX_FK_LOCATION_JURYFEEDBACK);
    }

    @Override
    public Identity<LocationRecord, Long> getIdentity() {
        return (Identity<LocationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LocationRecord> getPrimaryKey() {
        return Keys.PK_LOCATION;
    }

    @Override
    public List<UniqueKey<LocationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_LOCATION_IDENTIFIER);
    }

    @Override
    public List<ForeignKey<LocationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LOCATION__FK_LOCATION_EINSPIELLOKAL, Keys.LOCATION__FK_LOCATION_INSTRUMENTENDEPOT, Keys.LOCATION__FK_LOCATION_JURYFEEDBACK);
    }

    private transient LocationPath _fkLocationEinspiellokal;

    /**
     * Get the implicit join path to the <code>public.location</code> table, via
     * the <code>fk_location_einspiellokal</code> key.
     */
    public LocationPath fkLocationEinspiellokal() {
        if (_fkLocationEinspiellokal == null)
            _fkLocationEinspiellokal = new LocationPath(this, Keys.LOCATION__FK_LOCATION_EINSPIELLOKAL, null);

        return _fkLocationEinspiellokal;
    }

    private transient LocationPath _fkLocationInstrumentendepot;

    /**
     * Get the implicit join path to the <code>public.location</code> table, via
     * the <code>fk_location_instrumentendepot</code> key.
     */
    public LocationPath fkLocationInstrumentendepot() {
        if (_fkLocationInstrumentendepot == null)
            _fkLocationInstrumentendepot = new LocationPath(this, Keys.LOCATION__FK_LOCATION_INSTRUMENTENDEPOT, null);

        return _fkLocationInstrumentendepot;
    }

    private transient LocationPath _fkLocationJuryfeedback;

    /**
     * Get the implicit join path to the <code>public.location</code> table, via
     * the <code>fk_location_juryfeedback</code> key.
     */
    public LocationPath fkLocationJuryfeedback() {
        if (_fkLocationJuryfeedback == null)
            _fkLocationJuryfeedback = new LocationPath(this, Keys.LOCATION__FK_LOCATION_JURYFEEDBACK, null);

        return _fkLocationJuryfeedback;
    }

    private transient TimetableEntryPath _timetableEntry;

    /**
     * Get the implicit to-many join path to the
     * <code>public.timetable_entry</code> table
     */
    public TimetableEntryPath timetableEntry() {
        if (_timetableEntry == null)
            _timetableEntry = new TimetableEntryPath(this, null, Keys.TIMETABLE_ENTRY__FK_TIMETABLE_LOCATION.getInverseKey());

        return _timetableEntry;
    }

    private transient UnterhaltungEntryPath _unterhaltungEntry;

    /**
     * Get the implicit to-many join path to the
     * <code>public.unterhaltung_entry</code> table
     */
    public UnterhaltungEntryPath unterhaltungEntry() {
        if (_unterhaltungEntry == null)
            _unterhaltungEntry = new UnterhaltungEntryPath(this, null, Keys.UNTERHALTUNG_ENTRY__FK_UNTERHALTUNG_LOCATION.getInverseKey());

        return _unterhaltungEntry;
    }

    @Override
    public Location as(String alias) {
        return new Location(DSL.name(alias), this);
    }

    @Override
    public Location as(Name alias) {
        return new Location(alias, this);
    }

    @Override
    public Location as(Table<?> alias) {
        return new Location(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Location rename(String name) {
        return new Location(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Location rename(Name name) {
        return new Location(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Location rename(Table<?> name) {
        return new Location(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Location where(Condition condition) {
        return new Location(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Location where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Location where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Location where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Location where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Location where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Location where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Location where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Location whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Location whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
