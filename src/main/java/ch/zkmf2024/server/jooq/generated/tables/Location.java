/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.records.LocationRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.util.function.Function;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Location extends TableImpl<LocationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>location</code>
     */
    public static final Location LOCATION = new Location();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LocationRecord> getRecordType() {
        return LocationRecord.class;
    }

    /**
     * The column <code>location.id</code>.
     */
    public final TableField<LocationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>location.name</code>.
     */
    public final TableField<LocationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>location.address</code>.
     */
    public final TableField<LocationRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>location.latitude</code>.
     */
    public final TableField<LocationRecord, BigDecimal> LATITUDE = createField(DSL.name("latitude"), SQLDataType.DECIMAL(16, 12).nullable(false), this, "");

    /**
     * The column <code>location.longitude</code>.
     */
    public final TableField<LocationRecord, BigDecimal> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.DECIMAL(16, 12).nullable(false), this, "");

    private Location(Name alias, Table<LocationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Location(Name alias, Table<LocationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>location</code> table reference
     */
    public Location(String alias) {
        this(DSL.name(alias), LOCATION);
    }

    /**
     * Create an aliased <code>location</code> table reference
     */
    public Location(Name alias) {
        this(alias, LOCATION);
    }

    /**
     * Create a <code>location</code> table reference
     */
    public Location() {
        this(DSL.name("location"), null);
    }

    public <O extends Record> Location(Table<O> child, ForeignKey<O, LocationRecord> key) {
        super(child, key, LOCATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<LocationRecord, Long> getIdentity() {
        return (Identity<LocationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LocationRecord> getPrimaryKey() {
        return Keys.KEY_LOCATION_PRIMARY;
    }

    @Override
    public Location as(String alias) {
        return new Location(DSL.name(alias), this);
    }

    @Override
    public Location as(Name alias) {
        return new Location(alias, this);
    }

    @Override
    public Location as(Table<?> alias) {
        return new Location(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Location rename(String name) {
        return new Location(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Location rename(Name name) {
        return new Location(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Location rename(Table<?> name) {
        return new Location(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, BigDecimal, BigDecimal> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super String, ? super String, ? super BigDecimal, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super String, ? super String, ? super BigDecimal, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
