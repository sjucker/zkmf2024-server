/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Indexes;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.enums.LocationLocationType;
import ch.zkmf2024.server.jooq.generated.tables.records.LocationRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function15;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Location extends TableImpl<LocationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>location</code>
     */
    public static final Location LOCATION = new Location();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LocationRecord> getRecordType() {
        return LocationRecord.class;
    }

    /**
     * The column <code>location.id</code>.
     */
    public final TableField<LocationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>location.name</code>.
     */
    public final TableField<LocationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>location.address</code>.
     */
    public final TableField<LocationRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>location.latitude</code>.
     */
    public final TableField<LocationRecord, BigDecimal> LATITUDE = createField(DSL.name("latitude"), SQLDataType.NUMERIC(16, 12).nullable(false), this, "");

    /**
     * The column <code>location.longitude</code>.
     */
    public final TableField<LocationRecord, BigDecimal> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.NUMERIC(16, 12).nullable(false), this, "");

    /**
     * The column <code>location.location_type</code>.
     */
    public final TableField<LocationRecord, LocationLocationType> LOCATION_TYPE = createField(DSL.name("location_type"), SQLDataType.VARCHAR.asEnumDataType(ch.zkmf2024.server.jooq.generated.enums.LocationLocationType.class), this, "");

    /**
     * The column <code>location.capacity</code>.
     */
    public final TableField<LocationRecord, String> CAPACITY = createField(DSL.name("capacity"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>location.modules</code>.
     */
    public final TableField<LocationRecord, String> MODULES = createField(DSL.name("modules"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>location.einspiellokal_id</code>.
     */
    public final TableField<LocationRecord, Long> EINSPIELLOKAL_ID = createField(DSL.name("einspiellokal_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>location.instrumentendepot_id</code>.
     */
    public final TableField<LocationRecord, Long> INSTRUMENTENDEPOT_ID = createField(DSL.name("instrumentendepot_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>location.juryfeedback_id</code>.
     */
    public final TableField<LocationRecord, Long> JURYFEEDBACK_ID = createField(DSL.name("juryfeedback_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>location.sort_order</code>.
     */
    public final TableField<LocationRecord, Integer> SORT_ORDER = createField(DSL.name("sort_order"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>location.identifier</code>.
     */
    public final TableField<LocationRecord, String> IDENTIFIER = createField(DSL.name("identifier"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>location.cloudflare_id</code>.
     */
    public final TableField<LocationRecord, String> CLOUDFLARE_ID = createField(DSL.name("cloudflare_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>location.kuula_id</code>.
     */
    public final TableField<LocationRecord, String> KUULA_ID = createField(DSL.name("kuula_id"), SQLDataType.VARCHAR(255), this, "");

    private Location(Name alias, Table<LocationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Location(Name alias, Table<LocationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>location</code> table reference
     */
    public Location(String alias) {
        this(DSL.name(alias), LOCATION);
    }

    /**
     * Create an aliased <code>location</code> table reference
     */
    public Location(Name alias) {
        this(alias, LOCATION);
    }

    /**
     * Create a <code>location</code> table reference
     */
    public Location() {
        this(DSL.name("location"), null);
    }

    public <O extends Record> Location(Table<O> child, ForeignKey<O, LocationRecord> key) {
        super(child, key, LOCATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FK_LOCATION_EINSPIELLOKAL, Indexes.IDX_FK_LOCATION_INSTRUMENTENDEPOT, Indexes.IDX_FK_LOCATION_JURYFEEDBACK);
    }

    @Override
    public Identity<LocationRecord, Long> getIdentity() {
        return (Identity<LocationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LocationRecord> getPrimaryKey() {
        return Keys.PK_LOCATION;
    }

    @Override
    public List<UniqueKey<LocationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_LOCATION_IDENTIFIER);
    }

    @Override
    public List<ForeignKey<LocationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LOCATION__FK_LOCATION_EINSPIELLOKAL, Keys.LOCATION__FK_LOCATION_INSTRUMENTENDEPOT, Keys.LOCATION__FK_LOCATION_JURYFEEDBACK);
    }

    private transient Location _fkLocationEinspiellokal;
    private transient Location _fkLocationInstrumentendepot;
    private transient Location _fkLocationJuryfeedback;

    /**
     * Get the implicit join path to the <code>public.location</code> table, via
     * the <code>fk_location_einspiellokal</code> key.
     */
    public Location fkLocationEinspiellokal() {
        if (_fkLocationEinspiellokal == null)
            _fkLocationEinspiellokal = new Location(this, Keys.LOCATION__FK_LOCATION_EINSPIELLOKAL);

        return _fkLocationEinspiellokal;
    }

    /**
     * Get the implicit join path to the <code>public.location</code> table, via
     * the <code>fk_location_instrumentendepot</code> key.
     */
    public Location fkLocationInstrumentendepot() {
        if (_fkLocationInstrumentendepot == null)
            _fkLocationInstrumentendepot = new Location(this, Keys.LOCATION__FK_LOCATION_INSTRUMENTENDEPOT);

        return _fkLocationInstrumentendepot;
    }

    /**
     * Get the implicit join path to the <code>public.location</code> table, via
     * the <code>fk_location_juryfeedback</code> key.
     */
    public Location fkLocationJuryfeedback() {
        if (_fkLocationJuryfeedback == null)
            _fkLocationJuryfeedback = new Location(this, Keys.LOCATION__FK_LOCATION_JURYFEEDBACK);

        return _fkLocationJuryfeedback;
    }

    @Override
    public Location as(String alias) {
        return new Location(DSL.name(alias), this);
    }

    @Override
    public Location as(Name alias) {
        return new Location(alias, this);
    }

    @Override
    public Location as(Table<?> alias) {
        return new Location(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Location rename(String name) {
        return new Location(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Location rename(Name name) {
        return new Location(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Location rename(Table<?> name) {
        return new Location(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Long, String, String, BigDecimal, BigDecimal, LocationLocationType, String, String, Long, Long, Long, Integer, String, String, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function15<? super Long, ? super String, ? super String, ? super BigDecimal, ? super BigDecimal, ? super LocationLocationType, ? super String, ? super String, ? super Long, ? super Long, ? super Long, ? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function15<? super Long, ? super String, ? super String, ? super BigDecimal, ? super BigDecimal, ? super LocationLocationType, ? super String, ? super String, ? super Long, ? super Long, ? super Long, ? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
