/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Indexes;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.Kontakt.KontaktPath;
import ch.zkmf2024.server.jooq.generated.tables.Ranking.RankingPath;
import ch.zkmf2024.server.jooq.generated.tables.TimetableEntry.TimetableEntryPath;
import ch.zkmf2024.server.jooq.generated.tables.Titel.TitelPath;
import ch.zkmf2024.server.jooq.generated.tables.VereinAnmeldungAdhocOrchester.VereinAnmeldungAdhocOrchesterPath;
import ch.zkmf2024.server.jooq.generated.tables.VereinAnmeldungDetail.VereinAnmeldungDetailPath;
import ch.zkmf2024.server.jooq.generated.tables.VereinAnmeldungNichtmitglieder.VereinAnmeldungNichtmitgliederPath;
import ch.zkmf2024.server.jooq.generated.tables.VereinComment.VereinCommentPath;
import ch.zkmf2024.server.jooq.generated.tables.VereinDoppeleinsatz.VereinDoppeleinsatzPath;
import ch.zkmf2024.server.jooq.generated.tables.VereinMessage.VereinMessagePath;
import ch.zkmf2024.server.jooq.generated.tables.VereinProgramm.VereinProgrammPath;
import ch.zkmf2024.server.jooq.generated.tables.VereinStatus.VereinStatusPath;
import ch.zkmf2024.server.jooq.generated.tables.records.VereinRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Verein extends TableImpl<VereinRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>verein</code>
     */
    public static final Verein VEREIN = new Verein();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VereinRecord> getRecordType() {
        return VereinRecord.class;
    }

    /**
     * The column <code>verein.id</code>.
     */
    public final TableField<VereinRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>verein.email</code>.
     */
    public final TableField<VereinRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>verein.praesident_kontakt_id</code>.
     */
    public final TableField<VereinRecord, Long> PRAESIDENT_KONTAKT_ID = createField(DSL.name("praesident_kontakt_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>verein.direktion_kontakt_id</code>.
     */
    public final TableField<VereinRecord, Long> DIREKTION_KONTAKT_ID = createField(DSL.name("direktion_kontakt_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>verein.vereinsname</code>.
     */
    public final TableField<VereinRecord, String> VEREINSNAME = createField(DSL.name("vereinsname"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein.adresse</code>.
     */
    public final TableField<VereinRecord, String> ADRESSE = createField(DSL.name("adresse"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein.plz</code>.
     */
    public final TableField<VereinRecord, Integer> PLZ = createField(DSL.name("plz"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>verein.ort</code>.
     */
    public final TableField<VereinRecord, String> ORT = createField(DSL.name("ort"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein.homepage</code>.
     */
    public final TableField<VereinRecord, String> HOMEPAGE = createField(DSL.name("homepage"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein.facebook</code>.
     */
    public final TableField<VereinRecord, String> FACEBOOK = createField(DSL.name("facebook"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein.instagram</code>.
     */
    public final TableField<VereinRecord, String> INSTAGRAM = createField(DSL.name("instagram"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein.iban</code>.
     */
    public final TableField<VereinRecord, String> IBAN = createField(DSL.name("iban"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein.modula</code>.
     */
    public final TableField<VereinRecord, Boolean> MODULA = createField(DSL.name("modula"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein.modulb</code>.
     */
    public final TableField<VereinRecord, Boolean> MODULB = createField(DSL.name("modulb"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein.modulc</code>.
     */
    public final TableField<VereinRecord, Boolean> MODULC = createField(DSL.name("modulc"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein.moduld</code>.
     */
    public final TableField<VereinRecord, Boolean> MODULD = createField(DSL.name("moduld"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein.module</code>.
     */
    public final TableField<VereinRecord, Boolean> MODULE = createField(DSL.name("module"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein.modulf</code>.
     */
    public final TableField<VereinRecord, Boolean> MODULF = createField(DSL.name("modulf"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein.modulg</code>.
     */
    public final TableField<VereinRecord, Boolean> MODULG = createField(DSL.name("modulg"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein.modulh</code>.
     */
    public final TableField<VereinRecord, Boolean> MODULH = createField(DSL.name("modulh"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein.klasse_modula</code>.
     */
    public final TableField<VereinRecord, String> KLASSE_MODULA = createField(DSL.name("klasse_modula"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein.klasse_modulb</code>.
     */
    public final TableField<VereinRecord, String> KLASSE_MODULB = createField(DSL.name("klasse_modulb"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein.klasse_modulh</code>.
     */
    public final TableField<VereinRecord, String> KLASSE_MODULH = createField(DSL.name("klasse_modulh"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein.harmonie</code>.
     */
    public final TableField<VereinRecord, Boolean> HARMONIE = createField(DSL.name("harmonie"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein.brass_band</code>.
     */
    public final TableField<VereinRecord, Boolean> BRASS_BAND = createField(DSL.name("brass_band"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein.fanfare</code>.
     */
    public final TableField<VereinRecord, Boolean> FANFARE = createField(DSL.name("fanfare"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein.tambouren</code>.
     */
    public final TableField<VereinRecord, Boolean> TAMBOUREN = createField(DSL.name("tambouren"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein.perkussionsensemble</code>.
     */
    public final TableField<VereinRecord, Boolean> PERKUSSIONSENSEMBLE = createField(DSL.name("perkussionsensemble"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein.website_text</code>.
     */
    public final TableField<VereinRecord, String> WEBSITE_TEXT = createField(DSL.name("website_text"), SQLDataType.VARCHAR(4096), this, "");

    /**
     * The column <code>verein.direktion_doppeleinsatz</code>.
     */
    public final TableField<VereinRecord, Boolean> DIREKTION_DOPPELEINSATZ = createField(DSL.name("direktion_doppeleinsatz"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein.direktion_doppeleinsatz_verein</code>.
     */
    public final TableField<VereinRecord, String> DIREKTION_DOPPELEINSATZ_VEREIN = createField(DSL.name("direktion_doppeleinsatz_verein"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein.mitspieler_doppeleinsatz</code>.
     */
    public final TableField<VereinRecord, Boolean> MITSPIELER_DOPPELEINSATZ = createField(DSL.name("mitspieler_doppeleinsatz"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein.confirmed_at</code>.
     */
    public final TableField<VereinRecord, LocalDateTime> CONFIRMED_AT = createField(DSL.name("confirmed_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>verein.tambouren_kat_a</code>.
     */
    public final TableField<VereinRecord, Boolean> TAMBOUREN_KAT_A = createField(DSL.name("tambouren_kat_a"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein.tambouren_kat_b</code>.
     */
    public final TableField<VereinRecord, Boolean> TAMBOUREN_KAT_B = createField(DSL.name("tambouren_kat_b"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein.tambouren_kat_c</code>.
     */
    public final TableField<VereinRecord, Boolean> TAMBOUREN_KAT_C = createField(DSL.name("tambouren_kat_c"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>verein.phase2_confirmed_by</code>.
     */
    public final TableField<VereinRecord, String> PHASE2_CONFIRMED_BY = createField(DSL.name("phase2_confirmed_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein.phase2_confirmed_at</code>.
     */
    public final TableField<VereinRecord, LocalDateTime> PHASE2_CONFIRMED_AT = createField(DSL.name("phase2_confirmed_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>verein.prov_wettspiel</code>.
     */
    public final TableField<VereinRecord, String> PROV_WETTSPIEL = createField(DSL.name("prov_wettspiel"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein.prov_parademusik</code>.
     */
    public final TableField<VereinRecord, String> PROV_PARADEMUSIK = createField(DSL.name("prov_parademusik"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein.prov_platzkonzert</code>.
     */
    public final TableField<VereinRecord, String> PROV_PLATZKONZERT = createField(DSL.name("prov_platzkonzert"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>verein.programm_last_updated</code>.
     */
    public final TableField<VereinRecord, LocalDateTime> PROGRAMM_LAST_UPDATED = createField(DSL.name("programm_last_updated"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>verein.identifier</code>.
     */
    public final TableField<VereinRecord, String> IDENTIFIER = createField(DSL.name("identifier"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("''::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>verein.lunch_time</code>.
     */
    public final TableField<VereinRecord, LocalTime> LUNCH_TIME = createField(DSL.name("lunch_time"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>verein.phase4_confirmed_at</code>.
     */
    public final TableField<VereinRecord, LocalDateTime> PHASE4_CONFIRMED_AT = createField(DSL.name("phase4_confirmed_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>verein.stage_setup_confirmed_at</code>.
     */
    public final TableField<VereinRecord, LocalDateTime> STAGE_SETUP_CONFIRMED_AT = createField(DSL.name("stage_setup_confirmed_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private Verein(Name alias, Table<VereinRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Verein(Name alias, Table<VereinRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>verein</code> table reference
     */
    public Verein(String alias) {
        this(DSL.name(alias), VEREIN);
    }

    /**
     * Create an aliased <code>verein</code> table reference
     */
    public Verein(Name alias) {
        this(alias, VEREIN);
    }

    /**
     * Create a <code>verein</code> table reference
     */
    public Verein() {
        this(DSL.name("verein"), null);
    }

    public <O extends Record> Verein(Table<O> path, ForeignKey<O, VereinRecord> childPath, InverseForeignKey<O, VereinRecord> parentPath) {
        super(path, childPath, parentPath, VEREIN);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class VereinPath extends Verein implements Path<VereinRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> VereinPath(Table<O> path, ForeignKey<O, VereinRecord> childPath, InverseForeignKey<O, VereinRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private VereinPath(Name alias, Table<VereinRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public VereinPath as(String alias) {
            return new VereinPath(DSL.name(alias), this);
        }

        @Override
        public VereinPath as(Name alias) {
            return new VereinPath(alias, this);
        }

        @Override
        public VereinPath as(Table<?> alias) {
            return new VereinPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FK_VEREIN_DIREKTION_KONTAKT, Indexes.IDX_FK_VEREIN_PRAESIDENT_KONTAKT);
    }

    @Override
    public Identity<VereinRecord, Long> getIdentity() {
        return (Identity<VereinRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VereinRecord> getPrimaryKey() {
        return Keys.PK_VEREIN;
    }

    @Override
    public List<UniqueKey<VereinRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_VEREIN_IDENTIFIER);
    }

    @Override
    public List<ForeignKey<VereinRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VEREIN__FK_VEREIN_PRAESIDENT_KONTAKT, Keys.VEREIN__FK_VEREIN_DIREKTION_KONTAKT);
    }

    private transient KontaktPath _fkVereinPraesidentKontakt;

    /**
     * Get the implicit join path to the <code>public.kontakt</code> table, via
     * the <code>fk_verein_praesident_kontakt</code> key.
     */
    public KontaktPath fkVereinPraesidentKontakt() {
        if (_fkVereinPraesidentKontakt == null)
            _fkVereinPraesidentKontakt = new KontaktPath(this, Keys.VEREIN__FK_VEREIN_PRAESIDENT_KONTAKT, null);

        return _fkVereinPraesidentKontakt;
    }

    private transient KontaktPath _fkVereinDirektionKontakt;

    /**
     * Get the implicit join path to the <code>public.kontakt</code> table, via
     * the <code>fk_verein_direktion_kontakt</code> key.
     */
    public KontaktPath fkVereinDirektionKontakt() {
        if (_fkVereinDirektionKontakt == null)
            _fkVereinDirektionKontakt = new KontaktPath(this, Keys.VEREIN__FK_VEREIN_DIREKTION_KONTAKT, null);

        return _fkVereinDirektionKontakt;
    }

    private transient RankingPath _ranking;

    /**
     * Get the implicit to-many join path to the <code>public.ranking</code>
     * table
     */
    public RankingPath ranking() {
        if (_ranking == null)
            _ranking = new RankingPath(this, null, Keys.RANKING__FK_RANKING_VEREIN.getInverseKey());

        return _ranking;
    }

    private transient TimetableEntryPath _timetableEntry;

    /**
     * Get the implicit to-many join path to the
     * <code>public.timetable_entry</code> table
     */
    public TimetableEntryPath timetableEntry() {
        if (_timetableEntry == null)
            _timetableEntry = new TimetableEntryPath(this, null, Keys.TIMETABLE_ENTRY__FK_TIMETABLE_VEREIN.getInverseKey());

        return _timetableEntry;
    }

    private transient TitelPath _titel;

    /**
     * Get the implicit to-many join path to the <code>public.titel</code> table
     */
    public TitelPath titel() {
        if (_titel == null)
            _titel = new TitelPath(this, null, Keys.TITEL__FK_TITEL_VEREIN.getInverseKey());

        return _titel;
    }

    private transient VereinAnmeldungAdhocOrchesterPath _vereinAnmeldungAdhocOrchester;

    /**
     * Get the implicit to-many join path to the
     * <code>public.verein_anmeldung_adhoc_orchester</code> table
     */
    public VereinAnmeldungAdhocOrchesterPath vereinAnmeldungAdhocOrchester() {
        if (_vereinAnmeldungAdhocOrchester == null)
            _vereinAnmeldungAdhocOrchester = new VereinAnmeldungAdhocOrchesterPath(this, null, Keys.VEREIN_ANMELDUNG_ADHOC_ORCHESTER__FK_VEREIN_ANMELDUNG_ADHOC_ORCHESTER_VEREIN.getInverseKey());

        return _vereinAnmeldungAdhocOrchester;
    }

    private transient VereinAnmeldungDetailPath _vereinAnmeldungDetail;

    /**
     * Get the implicit to-many join path to the
     * <code>public.verein_anmeldung_detail</code> table
     */
    public VereinAnmeldungDetailPath vereinAnmeldungDetail() {
        if (_vereinAnmeldungDetail == null)
            _vereinAnmeldungDetail = new VereinAnmeldungDetailPath(this, null, Keys.VEREIN_ANMELDUNG_DETAIL__FK_VEREIN_ANMELDUNG_DETAIL_VEREIN.getInverseKey());

        return _vereinAnmeldungDetail;
    }

    private transient VereinAnmeldungNichtmitgliederPath _vereinAnmeldungNichtmitglieder;

    /**
     * Get the implicit to-many join path to the
     * <code>public.verein_anmeldung_nichtmitglieder</code> table
     */
    public VereinAnmeldungNichtmitgliederPath vereinAnmeldungNichtmitglieder() {
        if (_vereinAnmeldungNichtmitglieder == null)
            _vereinAnmeldungNichtmitglieder = new VereinAnmeldungNichtmitgliederPath(this, null, Keys.VEREIN_ANMELDUNG_NICHTMITGLIEDER__FK_VEREIN_ANMELDUNG_NICHTMITGLIEDER_VEREIN.getInverseKey());

        return _vereinAnmeldungNichtmitglieder;
    }

    private transient VereinCommentPath _vereinComment;

    /**
     * Get the implicit to-many join path to the
     * <code>public.verein_comment</code> table
     */
    public VereinCommentPath vereinComment() {
        if (_vereinComment == null)
            _vereinComment = new VereinCommentPath(this, null, Keys.VEREIN_COMMENT__FK_VEREIN_COMMENT_VEREIN.getInverseKey());

        return _vereinComment;
    }

    private transient VereinDoppeleinsatzPath _fkVereinDoppeleinsatzOtherVerein;

    /**
     * Get the implicit to-many join path to the
     * <code>public.verein_doppeleinsatz</code> table, via the
     * <code>fk_verein_doppeleinsatz_other_verein</code> key
     */
    public VereinDoppeleinsatzPath fkVereinDoppeleinsatzOtherVerein() {
        if (_fkVereinDoppeleinsatzOtherVerein == null)
            _fkVereinDoppeleinsatzOtherVerein = new VereinDoppeleinsatzPath(this, null, Keys.VEREIN_DOPPELEINSATZ__FK_VEREIN_DOPPELEINSATZ_OTHER_VEREIN.getInverseKey());

        return _fkVereinDoppeleinsatzOtherVerein;
    }

    private transient VereinDoppeleinsatzPath _fkVereinDoppeleinsatzVerein;

    /**
     * Get the implicit to-many join path to the
     * <code>public.verein_doppeleinsatz</code> table, via the
     * <code>fk_verein_doppeleinsatz_verein</code> key
     */
    public VereinDoppeleinsatzPath fkVereinDoppeleinsatzVerein() {
        if (_fkVereinDoppeleinsatzVerein == null)
            _fkVereinDoppeleinsatzVerein = new VereinDoppeleinsatzPath(this, null, Keys.VEREIN_DOPPELEINSATZ__FK_VEREIN_DOPPELEINSATZ_VEREIN.getInverseKey());

        return _fkVereinDoppeleinsatzVerein;
    }

    private transient VereinMessagePath _vereinMessage;

    /**
     * Get the implicit to-many join path to the
     * <code>public.verein_message</code> table
     */
    public VereinMessagePath vereinMessage() {
        if (_vereinMessage == null)
            _vereinMessage = new VereinMessagePath(this, null, Keys.VEREIN_MESSAGE__FK_VEREIN_MESSAGE_VEREIN.getInverseKey());

        return _vereinMessage;
    }

    private transient VereinProgrammPath _vereinProgramm;

    /**
     * Get the implicit to-many join path to the
     * <code>public.verein_programm</code> table
     */
    public VereinProgrammPath vereinProgramm() {
        if (_vereinProgramm == null)
            _vereinProgramm = new VereinProgrammPath(this, null, Keys.VEREIN_PROGRAMM__FK_VEREIN_PROGRAMM_VEREIN.getInverseKey());

        return _vereinProgramm;
    }

    private transient VereinStatusPath _vereinStatus;

    /**
     * Get the implicit to-many join path to the
     * <code>public.verein_status</code> table
     */
    public VereinStatusPath vereinStatus() {
        if (_vereinStatus == null)
            _vereinStatus = new VereinStatusPath(this, null, Keys.VEREIN_STATUS__FK_VEREIN_STATUS.getInverseKey());

        return _vereinStatus;
    }

    @Override
    public Verein as(String alias) {
        return new Verein(DSL.name(alias), this);
    }

    @Override
    public Verein as(Name alias) {
        return new Verein(alias, this);
    }

    @Override
    public Verein as(Table<?> alias) {
        return new Verein(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Verein rename(String name) {
        return new Verein(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Verein rename(Name name) {
        return new Verein(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Verein rename(Table<?> name) {
        return new Verein(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Verein where(Condition condition) {
        return new Verein(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Verein where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Verein where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Verein where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Verein where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Verein where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Verein where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Verein where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Verein whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Verein whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
