/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.Verein.VereinPath;
import ch.zkmf2024.server.jooq.generated.tables.records.KontaktRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Collection;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Kontakt extends TableImpl<KontaktRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>kontakt</code>
     */
    public static final Kontakt KONTAKT = new Kontakt();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KontaktRecord> getRecordType() {
        return KontaktRecord.class;
    }

    /**
     * The column <code>kontakt.id</code>.
     */
    public final TableField<KontaktRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>kontakt.vorname</code>.
     */
    public final TableField<KontaktRecord, String> VORNAME = createField(DSL.name("vorname"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>kontakt.nachname</code>.
     */
    public final TableField<KontaktRecord, String> NACHNAME = createField(DSL.name("nachname"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>kontakt.adresse</code>.
     */
    public final TableField<KontaktRecord, String> ADRESSE = createField(DSL.name("adresse"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>kontakt.plz</code>.
     */
    public final TableField<KontaktRecord, Integer> PLZ = createField(DSL.name("plz"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>kontakt.ort</code>.
     */
    public final TableField<KontaktRecord, String> ORT = createField(DSL.name("ort"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>kontakt.email</code>.
     */
    public final TableField<KontaktRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>kontakt.telefon_privat</code>.
     */
    public final TableField<KontaktRecord, String> TELEFON_PRIVAT = createField(DSL.name("telefon_privat"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>kontakt.telefon_mobile</code>.
     */
    public final TableField<KontaktRecord, String> TELEFON_MOBILE = createField(DSL.name("telefon_mobile"), SQLDataType.VARCHAR(255), this, "");

    private Kontakt(Name alias, Table<KontaktRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Kontakt(Name alias, Table<KontaktRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>kontakt</code> table reference
     */
    public Kontakt(String alias) {
        this(DSL.name(alias), KONTAKT);
    }

    /**
     * Create an aliased <code>kontakt</code> table reference
     */
    public Kontakt(Name alias) {
        this(alias, KONTAKT);
    }

    /**
     * Create a <code>kontakt</code> table reference
     */
    public Kontakt() {
        this(DSL.name("kontakt"), null);
    }

    public <O extends Record> Kontakt(Table<O> path, ForeignKey<O, KontaktRecord> childPath, InverseForeignKey<O, KontaktRecord> parentPath) {
        super(path, childPath, parentPath, KONTAKT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class KontaktPath extends Kontakt implements Path<KontaktRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> KontaktPath(Table<O> path, ForeignKey<O, KontaktRecord> childPath, InverseForeignKey<O, KontaktRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private KontaktPath(Name alias, Table<KontaktRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public KontaktPath as(String alias) {
            return new KontaktPath(DSL.name(alias), this);
        }

        @Override
        public KontaktPath as(Name alias) {
            return new KontaktPath(alias, this);
        }

        @Override
        public KontaktPath as(Table<?> alias) {
            return new KontaktPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<KontaktRecord, Long> getIdentity() {
        return (Identity<KontaktRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<KontaktRecord> getPrimaryKey() {
        return Keys.PK_KONTAKT;
    }

    private transient VereinPath _fkVereinDirektionKontakt;

    /**
     * Get the implicit to-many join path to the <code>public.verein</code>
     * table, via the <code>fk_verein_direktion_kontakt</code> key
     */
    public VereinPath fkVereinDirektionKontakt() {
        if (_fkVereinDirektionKontakt == null)
            _fkVereinDirektionKontakt = new VereinPath(this, null, Keys.VEREIN__FK_VEREIN_DIREKTION_KONTAKT.getInverseKey());

        return _fkVereinDirektionKontakt;
    }

    private transient VereinPath _fkVereinPraesidentKontakt;

    /**
     * Get the implicit to-many join path to the <code>public.verein</code>
     * table, via the <code>fk_verein_praesident_kontakt</code> key
     */
    public VereinPath fkVereinPraesidentKontakt() {
        if (_fkVereinPraesidentKontakt == null)
            _fkVereinPraesidentKontakt = new VereinPath(this, null, Keys.VEREIN__FK_VEREIN_PRAESIDENT_KONTAKT.getInverseKey());

        return _fkVereinPraesidentKontakt;
    }

    @Override
    public Kontakt as(String alias) {
        return new Kontakt(DSL.name(alias), this);
    }

    @Override
    public Kontakt as(Name alias) {
        return new Kontakt(alias, this);
    }

    @Override
    public Kontakt as(Table<?> alias) {
        return new Kontakt(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Kontakt rename(String name) {
        return new Kontakt(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Kontakt rename(Name name) {
        return new Kontakt(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Kontakt rename(Table<?> name) {
        return new Kontakt(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Kontakt where(Condition condition) {
        return new Kontakt(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Kontakt where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Kontakt where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Kontakt where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Kontakt where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Kontakt where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Kontakt where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Kontakt where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Kontakt whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Kontakt whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
