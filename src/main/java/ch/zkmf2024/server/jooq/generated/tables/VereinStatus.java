/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.Verein.VereinPath;
import ch.zkmf2024.server.jooq.generated.tables.records.VereinStatusRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class VereinStatus extends TableImpl<VereinStatusRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>verein_status</code>
     */
    public static final VereinStatus VEREIN_STATUS = new VereinStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VereinStatusRecord> getRecordType() {
        return VereinStatusRecord.class;
    }

    /**
     * The column <code>verein_status.fk_verein</code>.
     */
    public final TableField<VereinStatusRecord, Long> FK_VEREIN = createField(DSL.name("fk_verein"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>verein_status.phase1</code>.
     */
    public final TableField<VereinStatusRecord, String> PHASE1 = createField(DSL.name("phase1"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'NEW'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>verein_status.phase2</code>.
     */
    public final TableField<VereinStatusRecord, String> PHASE2 = createField(DSL.name("phase2"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'NEW'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>verein_status.phase4</code>.
     */
    public final TableField<VereinStatusRecord, String> PHASE4 = createField(DSL.name("phase4"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'NEW'::character varying"), SQLDataType.VARCHAR)), this, "");

    private VereinStatus(Name alias, Table<VereinStatusRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private VereinStatus(Name alias, Table<VereinStatusRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>verein_status</code> table reference
     */
    public VereinStatus(String alias) {
        this(DSL.name(alias), VEREIN_STATUS);
    }

    /**
     * Create an aliased <code>verein_status</code> table reference
     */
    public VereinStatus(Name alias) {
        this(alias, VEREIN_STATUS);
    }

    /**
     * Create a <code>verein_status</code> table reference
     */
    public VereinStatus() {
        this(DSL.name("verein_status"), null);
    }

    public <O extends Record> VereinStatus(Table<O> path, ForeignKey<O, VereinStatusRecord> childPath, InverseForeignKey<O, VereinStatusRecord> parentPath) {
        super(path, childPath, parentPath, VEREIN_STATUS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class VereinStatusPath extends VereinStatus implements Path<VereinStatusRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> VereinStatusPath(Table<O> path, ForeignKey<O, VereinStatusRecord> childPath, InverseForeignKey<O, VereinStatusRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private VereinStatusPath(Name alias, Table<VereinStatusRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public VereinStatusPath as(String alias) {
            return new VereinStatusPath(DSL.name(alias), this);
        }

        @Override
        public VereinStatusPath as(Name alias) {
            return new VereinStatusPath(alias, this);
        }

        @Override
        public VereinStatusPath as(Table<?> alias) {
            return new VereinStatusPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<VereinStatusRecord> getPrimaryKey() {
        return Keys.PK_VEREIN_STATUS;
    }

    @Override
    public List<ForeignKey<VereinStatusRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VEREIN_STATUS__FK_VEREIN_STATUS);
    }

    private transient VereinPath _verein;

    /**
     * Get the implicit join path to the <code>public.verein</code> table.
     */
    public VereinPath verein() {
        if (_verein == null)
            _verein = new VereinPath(this, Keys.VEREIN_STATUS__FK_VEREIN_STATUS, null);

        return _verein;
    }

    @Override
    public VereinStatus as(String alias) {
        return new VereinStatus(DSL.name(alias), this);
    }

    @Override
    public VereinStatus as(Name alias) {
        return new VereinStatus(alias, this);
    }

    @Override
    public VereinStatus as(Table<?> alias) {
        return new VereinStatus(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VereinStatus rename(String name) {
        return new VereinStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VereinStatus rename(Name name) {
        return new VereinStatus(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VereinStatus rename(Table<?> name) {
        return new VereinStatus(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinStatus where(Condition condition) {
        return new VereinStatus(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinStatus where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinStatus where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinStatus where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VereinStatus where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VereinStatus where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VereinStatus where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public VereinStatus where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinStatus whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public VereinStatus whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
