/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Indexes;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.records.TitelRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Titel extends TableImpl<TitelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>titel</code>
     */
    public static final Titel TITEL = new Titel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TitelRecord> getRecordType() {
        return TitelRecord.class;
    }

    /**
     * The column <code>titel.id</code>.
     */
    public final TableField<TitelRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>titel.fk_verein</code>.
     */
    public final TableField<TitelRecord, Long> FK_VEREIN = createField(DSL.name("fk_verein"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>titel.titel_name</code>.
     */
    public final TableField<TitelRecord, String> TITEL_NAME = createField(DSL.name("titel_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>titel.composer</code>.
     */
    public final TableField<TitelRecord, String> COMPOSER = createField(DSL.name("composer"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>titel.arrangeur</code>.
     */
    public final TableField<TitelRecord, String> ARRANGEUR = createField(DSL.name("arrangeur"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>titel.grad</code>.
     */
    public final TableField<TitelRecord, BigDecimal> GRAD = createField(DSL.name("grad"), SQLDataType.DECIMAL(2, 1), this, "");

    /**
     * The column <code>titel.duration_in_seconds</code>.
     */
    public final TableField<TitelRecord, Integer> DURATION_IN_SECONDS = createField(DSL.name("duration_in_seconds"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>titel.modul</code>.
     */
    public final TableField<TitelRecord, String> MODUL = createField(DSL.name("modul"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>titel.klasse</code>.
     */
    public final TableField<TitelRecord, String> KLASSE = createField(DSL.name("klasse"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>titel.besetzung</code>.
     */
    public final TableField<TitelRecord, String> BESETZUNG = createField(DSL.name("besetzung"), SQLDataType.VARCHAR(255), this, "");

    private Titel(Name alias, Table<TitelRecord> aliased) {
        this(alias, aliased, null);
    }

    private Titel(Name alias, Table<TitelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>titel</code> table reference
     */
    public Titel(String alias) {
        this(DSL.name(alias), TITEL);
    }

    /**
     * Create an aliased <code>titel</code> table reference
     */
    public Titel(Name alias) {
        this(alias, TITEL);
    }

    /**
     * Create a <code>titel</code> table reference
     */
    public Titel() {
        this(DSL.name("titel"), null);
    }

    public <O extends Record> Titel(Table<O> child, ForeignKey<O, TitelRecord> key) {
        super(child, key, TITEL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TITEL_FK_VEREIN);
    }

    @Override
    public Identity<TitelRecord, Long> getIdentity() {
        return (Identity<TitelRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TitelRecord> getPrimaryKey() {
        return Keys.KEY_TITEL_PRIMARY;
    }

    @Override
    public List<ForeignKey<TitelRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TITEL_IBFK_1);
    }

    private transient Verein _verein;

    /**
     * Get the implicit join path to the <code>zkmf2024.verein</code> table.
     */
    public Verein verein() {
        if (_verein == null)
            _verein = new Verein(this, Keys.TITEL_IBFK_1);

        return _verein;
    }

    @Override
    public Titel as(String alias) {
        return new Titel(DSL.name(alias), this);
    }

    @Override
    public Titel as(Name alias) {
        return new Titel(alias, this);
    }

    @Override
    public Titel as(Table<?> alias) {
        return new Titel(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Titel rename(String name) {
        return new Titel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Titel rename(Name name) {
        return new Titel(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Titel rename(Table<?> name) {
        return new Titel(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Long, String, String, String, BigDecimal, Integer, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super Long, ? super String, ? super String, ? super String, ? super BigDecimal, ? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super Long, ? super String, ? super String, ? super String, ? super BigDecimal, ? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
