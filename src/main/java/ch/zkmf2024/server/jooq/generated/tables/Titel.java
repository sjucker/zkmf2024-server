/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Indexes;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.JudgeReport.JudgeReportPath;
import ch.zkmf2024.server.jooq.generated.tables.JudgeReportComment.JudgeReportCommentPath;
import ch.zkmf2024.server.jooq.generated.tables.JudgeReportRating.JudgeReportRatingPath;
import ch.zkmf2024.server.jooq.generated.tables.Verein.VereinPath;
import ch.zkmf2024.server.jooq.generated.tables.VereinProgramm.VereinProgrammPath;
import ch.zkmf2024.server.jooq.generated.tables.VereinProgrammTitel.VereinProgrammTitelPath;
import ch.zkmf2024.server.jooq.generated.tables.records.TitelRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Titel extends TableImpl<TitelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>titel</code>
     */
    public static final Titel TITEL = new Titel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TitelRecord> getRecordType() {
        return TitelRecord.class;
    }

    /**
     * The column <code>titel.id</code>.
     */
    public final TableField<TitelRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>titel.fk_verein</code>.
     */
    public final TableField<TitelRecord, Long> FK_VEREIN = createField(DSL.name("fk_verein"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>titel.titel_name</code>.
     */
    public final TableField<TitelRecord, String> TITEL_NAME = createField(DSL.name("titel_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>titel.composer</code>.
     */
    public final TableField<TitelRecord, String> COMPOSER = createField(DSL.name("composer"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>titel.arrangeur</code>.
     */
    public final TableField<TitelRecord, String> ARRANGEUR = createField(DSL.name("arrangeur"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>titel.grad</code>.
     */
    public final TableField<TitelRecord, BigDecimal> GRAD = createField(DSL.name("grad"), SQLDataType.NUMERIC(2, 1), this, "");

    /**
     * The column <code>titel.duration_in_seconds</code>.
     */
    public final TableField<TitelRecord, Integer> DURATION_IN_SECONDS = createField(DSL.name("duration_in_seconds"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>titel.modul</code>.
     */
    public final TableField<TitelRecord, String> MODUL = createField(DSL.name("modul"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>titel.klasse</code>.
     */
    public final TableField<TitelRecord, String> KLASSE = createField(DSL.name("klasse"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>titel.besetzung</code>.
     */
    public final TableField<TitelRecord, String> BESETZUNG = createField(DSL.name("besetzung"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>titel.info_moderation</code>.
     */
    public final TableField<TitelRecord, String> INFO_MODERATION = createField(DSL.name("info_moderation"), SQLDataType.VARCHAR(4096), this, "");

    /**
     * The column <code>titel.schwierigkeitsgrad</code>.
     */
    public final TableField<TitelRecord, String> SCHWIERIGKEITSGRAD = createField(DSL.name("schwierigkeitsgrad"), SQLDataType.VARCHAR(255), this, "");

    private Titel(Name alias, Table<TitelRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Titel(Name alias, Table<TitelRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>titel</code> table reference
     */
    public Titel(String alias) {
        this(DSL.name(alias), TITEL);
    }

    /**
     * Create an aliased <code>titel</code> table reference
     */
    public Titel(Name alias) {
        this(alias, TITEL);
    }

    /**
     * Create a <code>titel</code> table reference
     */
    public Titel() {
        this(DSL.name("titel"), null);
    }

    public <O extends Record> Titel(Table<O> path, ForeignKey<O, TitelRecord> childPath, InverseForeignKey<O, TitelRecord> parentPath) {
        super(path, childPath, parentPath, TITEL);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TitelPath extends Titel implements Path<TitelRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> TitelPath(Table<O> path, ForeignKey<O, TitelRecord> childPath, InverseForeignKey<O, TitelRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private TitelPath(Name alias, Table<TitelRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TitelPath as(String alias) {
            return new TitelPath(DSL.name(alias), this);
        }

        @Override
        public TitelPath as(Name alias) {
            return new TitelPath(alias, this);
        }

        @Override
        public TitelPath as(Table<?> alias) {
            return new TitelPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FK_TITEL_VEREIN);
    }

    @Override
    public Identity<TitelRecord, Long> getIdentity() {
        return (Identity<TitelRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TitelRecord> getPrimaryKey() {
        return Keys.PK_TITEL;
    }

    @Override
    public List<ForeignKey<TitelRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TITEL__FK_TITEL_VEREIN);
    }

    private transient VereinPath _verein;

    /**
     * Get the implicit join path to the <code>public.verein</code> table.
     */
    public VereinPath verein() {
        if (_verein == null)
            _verein = new VereinPath(this, Keys.TITEL__FK_TITEL_VEREIN, null);

        return _verein;
    }

    private transient JudgeReportCommentPath _judgeReportComment;

    /**
     * Get the implicit to-many join path to the
     * <code>public.judge_report_comment</code> table
     */
    public JudgeReportCommentPath judgeReportComment() {
        if (_judgeReportComment == null)
            _judgeReportComment = new JudgeReportCommentPath(this, null, Keys.JUDGE_REPORT_COMMENT__FK_JUDGE_REPORT_COMMENT_TITEL.getInverseKey());

        return _judgeReportComment;
    }

    private transient JudgeReportRatingPath _judgeReportRating;

    /**
     * Get the implicit to-many join path to the
     * <code>public.judge_report_rating</code> table
     */
    public JudgeReportRatingPath judgeReportRating() {
        if (_judgeReportRating == null)
            _judgeReportRating = new JudgeReportRatingPath(this, null, Keys.JUDGE_REPORT_RATING__FK_JUDGE_REPORT_RATING_TITEL.getInverseKey());

        return _judgeReportRating;
    }

    private transient VereinProgrammTitelPath _vereinProgrammTitel;

    /**
     * Get the implicit to-many join path to the
     * <code>public.verein_programm_titel</code> table
     */
    public VereinProgrammTitelPath vereinProgrammTitel() {
        if (_vereinProgrammTitel == null)
            _vereinProgrammTitel = new VereinProgrammTitelPath(this, null, Keys.VEREIN_PROGRAMM_TITEL__FK_VEREIN_PROGRAMM_TITEL_PROGRAMM_TITEL.getInverseKey());

        return _vereinProgrammTitel;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.judge_report</code> table
     */
    public JudgeReportPath judgeReport() {
        return judgeReportComment().judgeReport();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.verein_programm</code> table
     */
    public VereinProgrammPath vereinProgramm() {
        return vereinProgrammTitel().vereinProgramm();
    }

    @Override
    public Titel as(String alias) {
        return new Titel(DSL.name(alias), this);
    }

    @Override
    public Titel as(Name alias) {
        return new Titel(alias, this);
    }

    @Override
    public Titel as(Table<?> alias) {
        return new Titel(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Titel rename(String name) {
        return new Titel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Titel rename(Name name) {
        return new Titel(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Titel rename(Table<?> name) {
        return new Titel(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Titel where(Condition condition) {
        return new Titel(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Titel where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Titel where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Titel where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Titel where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Titel where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Titel where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Titel where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Titel whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Titel whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
