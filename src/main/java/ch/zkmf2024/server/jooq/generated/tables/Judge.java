/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.JudgeReport.JudgeReportPath;
import ch.zkmf2024.server.jooq.generated.tables.records.JudgeRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Judge extends TableImpl<JudgeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>judge</code>
     */
    public static final Judge JUDGE = new Judge();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JudgeRecord> getRecordType() {
        return JudgeRecord.class;
    }

    /**
     * The column <code>judge.id</code>.
     */
    public final TableField<JudgeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>judge.email</code>.
     */
    public final TableField<JudgeRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>judge.name</code>.
     */
    public final TableField<JudgeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>judge.first_name</code>.
     */
    public final TableField<JudgeRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>judge.modul</code>.
     */
    public final TableField<JudgeRecord, String> MODUL = createField(DSL.name("modul"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>judge.cloudflare_id</code>.
     */
    public final TableField<JudgeRecord, String> CLOUDFLARE_ID = createField(DSL.name("cloudflare_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>judge.presentation_text</code>.
     */
    public final TableField<JudgeRecord, String> PRESENTATION_TEXT = createField(DSL.name("presentation_text"), SQLDataType.VARCHAR(4096), this, "");

    private Judge(Name alias, Table<JudgeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Judge(Name alias, Table<JudgeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>judge</code> table reference
     */
    public Judge(String alias) {
        this(DSL.name(alias), JUDGE);
    }

    /**
     * Create an aliased <code>judge</code> table reference
     */
    public Judge(Name alias) {
        this(alias, JUDGE);
    }

    /**
     * Create a <code>judge</code> table reference
     */
    public Judge() {
        this(DSL.name("judge"), null);
    }

    public <O extends Record> Judge(Table<O> path, ForeignKey<O, JudgeRecord> childPath, InverseForeignKey<O, JudgeRecord> parentPath) {
        super(path, childPath, parentPath, JUDGE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JudgePath extends Judge implements Path<JudgeRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> JudgePath(Table<O> path, ForeignKey<O, JudgeRecord> childPath, InverseForeignKey<O, JudgeRecord> parentPath) {
            super(path, childPath, parentPath);
        }

        private JudgePath(Name alias, Table<JudgeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JudgePath as(String alias) {
            return new JudgePath(DSL.name(alias), this);
        }

        @Override
        public JudgePath as(Name alias) {
            return new JudgePath(alias, this);
        }

        @Override
        public JudgePath as(Table<?> alias) {
            return new JudgePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<JudgeRecord, Long> getIdentity() {
        return (Identity<JudgeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JudgeRecord> getPrimaryKey() {
        return Keys.PK_JUDGE;
    }

    @Override
    public List<UniqueKey<JudgeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.JUDGE_EMAIL_KEY);
    }

    private transient JudgeReportPath _judgeReport;

    /**
     * Get the implicit to-many join path to the
     * <code>public.judge_report</code> table
     */
    public JudgeReportPath judgeReport() {
        if (_judgeReport == null)
            _judgeReport = new JudgeReportPath(this, null, Keys.JUDGE_REPORT__FK_JUDGE_REPORT_JUDGE.getInverseKey());

        return _judgeReport;
    }

    @Override
    public Judge as(String alias) {
        return new Judge(DSL.name(alias), this);
    }

    @Override
    public Judge as(Name alias) {
        return new Judge(alias, this);
    }

    @Override
    public Judge as(Table<?> alias) {
        return new Judge(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Judge rename(String name) {
        return new Judge(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Judge rename(Name name) {
        return new Judge(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Judge rename(Table<?> name) {
        return new Judge(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Judge where(Condition condition) {
        return new Judge(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Judge where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Judge where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Judge where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Judge where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Judge where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Judge where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Judge where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Judge whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Judge whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
