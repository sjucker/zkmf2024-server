/*
 * This file is generated by jOOQ.
 */
package ch.zkmf2024.server.jooq.generated.tables;

import ch.zkmf2024.server.jooq.generated.DefaultSchema;
import ch.zkmf2024.server.jooq.generated.Keys;
import ch.zkmf2024.server.jooq.generated.tables.records.Zkmf2024UserRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.function.Function;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Zkmf2024User extends TableImpl<Zkmf2024UserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>zkmf2024_user</code>
     */
    public static final Zkmf2024User ZKMF2024_USER = new Zkmf2024User();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Zkmf2024UserRecord> getRecordType() {
        return Zkmf2024UserRecord.class;
    }

    /**
     * The column <code>zkmf2024_user.email</code>.
     */
    public final TableField<Zkmf2024UserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>zkmf2024_user.role</code>.
     */
    public final TableField<Zkmf2024UserRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>zkmf2024_user.password</code>.
     */
    public final TableField<Zkmf2024UserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field(DSL.raw("'{noop}pass'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>zkmf2024_user.last_login</code>.
     */
    public final TableField<Zkmf2024UserRecord, LocalDateTime> LAST_LOGIN = createField(DSL.name("last_login"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>zkmf2024_user.created_at</code>.
     */
    public final TableField<Zkmf2024UserRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>zkmf2024_user.email_verification</code>.
     */
    public final TableField<Zkmf2024UserRecord, String> EMAIL_VERIFICATION = createField(DSL.name("email_verification"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>zkmf2024_user.email_verified_at</code>.
     */
    public final TableField<Zkmf2024UserRecord, LocalDateTime> EMAIL_VERIFIED_AT = createField(DSL.name("email_verified_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>zkmf2024_user.password_reset_token</code>.
     */
    public final TableField<Zkmf2024UserRecord, String> PASSWORD_RESET_TOKEN = createField(DSL.name("password_reset_token"), SQLDataType.VARCHAR(255), this, "");

    private Zkmf2024User(Name alias, Table<Zkmf2024UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private Zkmf2024User(Name alias, Table<Zkmf2024UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>zkmf2024_user</code> table reference
     */
    public Zkmf2024User(String alias) {
        this(DSL.name(alias), ZKMF2024_USER);
    }

    /**
     * Create an aliased <code>zkmf2024_user</code> table reference
     */
    public Zkmf2024User(Name alias) {
        this(alias, ZKMF2024_USER);
    }

    /**
     * Create a <code>zkmf2024_user</code> table reference
     */
    public Zkmf2024User() {
        this(DSL.name("zkmf2024_user"), null);
    }

    public <O extends Record> Zkmf2024User(Table<O> child, ForeignKey<O, Zkmf2024UserRecord> key) {
        super(child, key, ZKMF2024_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<Zkmf2024UserRecord> getPrimaryKey() {
        return Keys.PK_ZKMF2024_USER;
    }

    @Override
    public Zkmf2024User as(String alias) {
        return new Zkmf2024User(DSL.name(alias), this);
    }

    @Override
    public Zkmf2024User as(Name alias) {
        return new Zkmf2024User(alias, this);
    }

    @Override
    public Zkmf2024User as(Table<?> alias) {
        return new Zkmf2024User(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Zkmf2024User rename(String name) {
        return new Zkmf2024User(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Zkmf2024User rename(Name name) {
        return new Zkmf2024User(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Zkmf2024User rename(Table<?> name) {
        return new Zkmf2024User(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, LocalDateTime, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
